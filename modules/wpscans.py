#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from core.constants import EX, EXTERNAL
from core.helper import logger_class
from core.module import Module


class WpscansModule(Module):
    _type = [EX]
    _services = ["http", "https"]
    _target_type = EXTERNAL
    _defaults = {
        "stealthy": False,
        "disable-tls": False,
        "max-threads": 5,
        "throttle": 0,
        "themes": "ap",
        "plugins": "at",
        "config-backups": True,
        "db-exports": True,
        "timthumbs": True,
    }
    _extension = ".json"

    def run(self):
        # Scan each service & port in payload
        for port in self._payload:
            logger_class(self, f"Scanning port: {port[0]} on service {port[1]}", "info")

            cmd = ["wpscan", "--url"]

            # Specify target
            cmd.append(f"{port[1]}://{self._target}:{port[0]}")

            # Read settings, set cmd
            enumerate = []
            for key, value in self._config:
                if(key == "stealthy" and value == "True"):
                    cmd.append("--stealthy")
                elif(key == "disable-tls" and value == "True"):
                    cmd.append("--disable-tls-checks")
                elif(key == "max-threads"):
                    cmd.extend(["--max-threads", value])
                elif(key == "throttle"):
                    cmd.extend(["--throttle", value])
                elif(key == "themes" or key == "plugins"):
                    enumerate.append(value)
                elif(key == "config-backups" and value == "True"):
                    enumerate.append("cb")
                elif(key == "db-exports" and value == "True"):
                    enumerate.append("dbe")
                elif(key == "timthumbs" and value == "True"):
                    enumerate.append("tt")

            cmd.extend(["--enumerate", ",".join(enumerate)])

            # Add output
            cmd.extend(["-o", {self._tmpfile_loc()}])

            # Perform scan
            self.run_cmd(cmd)

    def parse(self):
        # Already in json
        pass

    def init(self):
        pass
