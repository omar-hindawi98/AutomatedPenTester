#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from core.helper import logger_class
from core.constants import EXTERNAL, IG
from core.regressiontest import RegressionTest
from core.module import Module
import xmltodict
import json
import os


class NmapModule(Module):
    _type = [IG]
    _services = []
    _target_type = EXTERNAL
    _defaults = {}
    _extension = ".xml"

    def run(self):
        command = [
            "sudo",
            "nmap",
            "-sS",
            "-oX",
            (self._tmpfile_loc()),
        ]  # get command from JSON later

        self.run_cmd(" ".join(command + [self._target]))

    def parse(self):
        # Get current dir and check that path exists, else create path.
        target_loc = f"{os.getcwd()}/targets/{self._target}/results"

        # Open xml scan and convert to json
        if os.path.exists(f"{target_loc}/nmap_result.xml"):
            with open(f"{target_loc}/nmap_result.xml", "r") as f:
                xml = json.dumps(xmltodict.parse(f.read()), indent=4, sort_keys=True)

            # Overwrite scan results json
            with open(f"{target_loc}/nmap_result.json", "w") as f:
                f.write(xml)

    def init(self):
        pass


"""
Define regression tests here
"""


class NmapPortRegression(RegressionTest):
    def run(self):
        pass

    def parse(self):
        pass

    def get_result(self):
        pass

    def check(self):
        return {"cmd": [""], "payload": [""], "config": {}}


"""
Define regression tests here
"""


class NmapBruhRegression(RegressionTest):
    def run(self):
        pass

    def parse(self):
        pass

    def get_result(self):
        pass

    def check(self):
        return {"asd": [""], "a": [""], "fwe": {}}
