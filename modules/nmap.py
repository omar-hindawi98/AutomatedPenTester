#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from core.constants import EXTERNAL, IG
from core.regressiontest import RegressionTest
from core.module import Module
import xmltodict
import json
import os


class NmapModule(Module):
    _type = [IG]
    _services = []
    _target_type = EXTERNAL
    _defaults = {}
    _extension = ".xml"

    def run(self):
        command = [
            "sudo",
            "nmap",
            "-sS",
            "-p-",
            "-oX",
            (self._tmpfile_loc()),
        ]  # get command from JSON later

        self.run_cmd(" ".join(command + [self._target]))

    def parse(self):
        # Get current dir and check that path exists, else create path.
        target_loc = f"{os.getcwd()}/targets/{self._target}/results"

        # Open xml scan and convert to json
        if os.path.exists(f"{target_loc}/nmap_result.xml"):
            with open(f"{target_loc}/nmap_result.xml", "r") as f:
                xml = json.dumps(xmltodict.parse(f.read()), indent=4)

            # Overwrite scan results json
            with open(f"{target_loc}/nmap_result.json", "w+") as f:
                f.write(xml)

    def init(self):
        pass


"""
Define regression tests here
"""


class NmapPortRegression(RegressionTest):
    ports = [80, 22, 25] # Specifies which ports that are of interest (Leave empty if all)

    def run(self, session):
        pass

    def parse(self):
        pass

    def get_result(self):
        pass

    def check(self, target):
        open_ports = []

        # Check nmap file for open ports
        with open(
            f"{os.getcwd()}/targets/{target}/results/nmap_result.json",
            "r"
        ) as f:
            data = json.load(f)

        # Make into list
        if type(data["nmaprun"]["host"]["ports"]["port"]) is dict:
            data["nmaprun"]["host"]["ports"]["port"] = [data["nmaprun"]["host"]["ports"]["port"]]
        
        # Check all ports
        if not self.ports:
            for port in data["nmaprun"]["host"]["ports"]["port"]:
                if port["state"]["@state"] == "open":
                    open_ports.append({
                        "port": port["@portid"],
                        "service": port["service"]["@name"]
                    })
        # add ports with specific services
        else:
            for port in data["nmaprun"]["host"]["ports"]["port"]:
                if (
                    port["@portid"] in self.ports
                    and port["state"]["@state"] == "open"
                ):
                    open_ports.append({
                        "port": port["@portid"],
                        "service": port["service"]["@name"]
                    })

        return {"ports": open_ports}
