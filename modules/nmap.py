#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import logging
import subprocess
import sys
from core.regressiontest import RegressionTest
from core.module import Module
from xml.etree import ElementTree as ET
import subprocess
# import xmltodict
import json
import sys
import os

'''
Define core module here
'''
class NmapModule(Module):   
    _type = ["IG"]
    _services = ["http", "https"]

    _configs = {
        "asd": True,
        "wtf": "test"
    }

    def run(self):

        command = ["nmap", "-sS", "-A", "-p-", "-v", "-oX", "test.txt"]     # get command from JSON later
        target = "10.10.10.13"    

        try:
            subprocess.run(command + [target])
            # Add subprocess functions?
            # Save output into correct target dir.
            # Save how? txt. xml etc?

        except OSError as err:
            self.log(f"Execution failed: {err}", "error")

    def parse(self):
        target = "10.10.10.13"
        print("\n[PARSING NAMP RESULTS]")

        # Get current dir and check that path exists, else create path.
        target_loc = f'{os.getcwd()}\\targets\{target}\\nmap_scans'
        if not os.path.exists(target_loc):
            os.mkdir(os.path.join(target_loc))

        # Open scan and convert it to json
        if os.path.exists(f"{target_loc}\\recent_scan.xml"):
            with open(f"{target_loc}\\recent_scan.xml", "r") as f:
                xml = json.dumps(xmltodict.parse(f.read()), indent=4, sort_keys=True)
                f.close()

            # Create new json per scan
            file_count = len(os.listdir(target_loc))
            with open(f'{target_loc}/scan_{file_count}.json', 'w') as f:
                f.write(xml)
                f.close()

            # Save results for regression tests to retrieve
            super().save_result("")
    
    def get_result(self):
        pass

'''
Define regression tests here
'''
class NmapPortRegression(RegressionTest):
    def run(self):
        pass
    
    def parse(self):
        pass
    
    def get_result(self):
        pass

    def check(self):
        return {
            "cmd": [""],
            "payload": [""],
            "config": {
                
            }
        }

'''
Define regression tests here
'''
class NmapBruhRegression(RegressionTest):
    def run(self):
        pass
    
    def parse(self):
        pass
    
    def get_result(self):
        pass

    def check(self):
        return {
            "asd": [""],
            "a": [""],
            "fwe": {
                
            }
        }
