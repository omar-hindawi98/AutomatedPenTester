#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from core.helper import logger_class
from core.constants import EXTERNAL
import logging
import subprocess
import sys
from core.regressiontest import RegressionTest
from core.module import Module
from xml.etree import ElementTree as ET
import subprocess
import xmltodict
import json
import sys
import os

'''
Define core module here
'''
class NmapModule(Module):   
    _type = ["IG"]
    _services = []
    _target_type = EXTERNAL
    _defaults = {
        "asd": True,
        "wtf": "test"
    }

    def run(self):
        command = ["sudo", "nmap", "-sS", "-oX", (self._tmp + ".xml")]     # get command from JSON later

        print("RUNNING NMAP")
        try:
            self._session.run_cmd(" ".join(command + [self._target]))
            #subprocess.run(command + [self._target])
            # Add subprocess functions?
            # Save output into correct target dir.
            # Save how? txt. xml etc?

        except OSError as err:
            logger_class(self, f"Execution failed: {err}", "error")

        print("FINISHED RUNNING NMAP")

    def parse(self):
        print("\n[PARSING NMAP RESULTS]")

        # Get current dir and check that path exists, else create path.
        target_loc = f'{os.getcwd()}\\targets\{self._target}\\results'
        if not os.path.exists(target_loc):
            os.mkdir(target_loc)

        # Open xml scan and convert to json
        if os.path.exists(f"{target_loc}\\scan_results.xml"):
            with open(f"{target_loc}\\scan_results.xml", "r") as f:
                xml = json.dumps(xmltodict.parse(f.read()), indent=4, sort_keys=True)

            # Overwrite scan results json
            with open(f'{target_loc}/scan_results).json', 'w') as f:
                f.write(xml)

            # Save results for regression tests to retrieve
            super().save_result("")
    
    def init(self):
        pass

'''
Define regression tests here
'''
class NmapPortRegression(RegressionTest):
    def run(self):
        pass
    
    def parse(self):
        pass
    
    def get_result(self):
        pass

    def check(self):
        return {
            "cmd": [""],
            "payload": [""],
            "config": {
                
            }
        }

'''
Define regression tests here
'''
class NmapBruhRegression(RegressionTest):
    def run(self):
        pass
    
    def parse(self):
        pass
    
    def get_result(self):
        pass

    def check(self):
        return {
            "asd": [""],
            "a": [""],
            "fwe": {
                
            }
        }
