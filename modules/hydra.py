#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from core.helper import logger_class
from core.constants import EX, INTERNAL
from core.module import Module

"""
Define core module here
"""
# TODO: Implement this
# TODO: Might need port - service mapping here
class HydraModule(Module):
    _type = [EX]
    _services = [
        "afp",
        "cisco",
        "aaa",
        "cisco",
        "auth",
        "cisco",
        "enable",
        "cvs",
        "firebird",
        "ftp",
        "ftps",
        "http-form-get",
        "http-form-post",
        "http-get",
        "http-head",
        "http-proxy",
        "http-proxy-urlenum",
        "icq",
        "imap",
        "irc",
        "ldap2",
        "ldap3",
        "ms-sql",
        "mysql",
        "ncp",
        "nntp",
        "oracle",
        "oracle-listener",
        "oracle-sid",
        "pc-anywhere",
        "pcnfs",
        "pop3",
        "postgres",
        "rdp",
        "rexec",
        "rlogin",
        "rsh",
        "sap/r3",
        "sip",
        "smb",
        "smtp",
        "smtp-enum",
        "snmp",
        "socks5",
        "ssh",
        "sshkey",
        "subversion",
        "teamspeak",
        "(ts2)",
        "telnet",
        "vmware-auth",
        "vnc",
        "xmpp",
    ]
    _target_type = INTERNAL
    _defaults = {"asd": True, "wtf": "test"}
    _extension = ".xml"

    def run(self):
        logger_class(self, f"Running Hydra", "debug")

        # self._session.run_cmd(f"nikto -h {self._target} -port f{','.join(self._payload.ports)} -output f{self._tmpfile_loc()}")

        logger_class(self, f"Finished running Hydra", "debug")

    def parse(self):
        pass

    def init(self):
        pass
