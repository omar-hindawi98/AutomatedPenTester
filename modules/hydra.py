#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import json
import os
from core.regressiontest import RegressionTest
from core.helper import logger_class
from core.constants import EX, EXTERNAL
from core.module import Module


class HydraModule(Module):
    _type = [EX]
    _services = [
        "afp",
        "cisco",
        "aaa",
        "cisco",
        "auth",
        "cisco",
        "enable",
        "cvs",
        "firebird",
        "ftp",
        "ftps",
        "http-form-get",
        "http-form-post",
        "http-get",
        "http-head",
        "http-proxy",
        "http-proxy-urlenum",
        "icq",
        "imap",
        "irc",
        "ldap2",
        "ldap3",
        "ms-sql",
        "mysql",
        "ncp",
        "nntp",
        "oracle",
        "oracle-listener",
        "oracle-sid",
        "pc-anywhere",
        "pcnfs",
        "pop3",
        "postgres",
        "rdp",
        "rexec",
        "rlogin",
        "rsh",
        "sap/r3",
        "sip",
        "smb",
        "smtp",
        "smtp-enum",
        "snmp",
        "socks5",
        "ssh",
        "sshkey",
        "subversion",
        "teamspeak",
        "(ts2)",
        "telnet",
        "vmware-auth",
        "vnc",
        "xmpp",
    ]
    _target_type = EXTERNAL
    _defaults = {
        "threads": 1,
        "common_password_list": "",
        "users": "root"  # Add more users by separating with comma, eg. root,test,admin
        }
    _extension = ".json"

    def run(self):
        for port in self._payload["ports"]:
            logger_class(self, f"Bruteforcing: {port[0]} on service {port[1]}", "info")
            cmd = ["hydra", "-L", f"{self._tmp}tmp_userlist_{self._target}.txt", "-P", self._config["common_password_list"]]

            # Read settings, set cmd
            for key, value in self.config().items():
                if key == "threads":
                    cmd.extend(["-t", value])

            # Add output
            cmd.extend(["-b", self._extension.replace(".", "")])  # Ouput format
            cmd.extend(["-o", self._tmpfile_loc(port[0])])  # Output file

            # Add server, service & port to bruteforce
            cmd.extend(["-s", port[0]])
            cmd.extend([self._target, port[1]])

            # Perform scan
            self.run_cmd(cmd)

    def parse(self):
        # Does not need any
        pass

    def init(self):
        # Set common password list if empty
        if self.config()["common_password_list"] == "":
            self.set_config("common_password_list", self._tool_config["common_password_list"])

        # Create temporary user word list from string
        users_formatted = self._config["users"].replace(" ", "").replace(",", "\n")
        self.run_cmd(f"echo > {users_formatted} > {self._tmp}tmp_userlist_{self._target}.txt")


"""
Define regression tests here
"""


class HydraPasswordCheckRegression(RegressionTest):
    _extension = ".json" # Specifies what extension the result file has

    def run(self):
        for port in self._data["ports"]:
            user = port["user"]
            password = port["password"]

            cmd = ["hydra", "-l", user, "-p", password]

            # Add output
            cmd.extend(["-b", self._extension.replace(".", "")])  # Ouput format
            cmd.extend(["-o", self._tmpfile_loc(port[0])])  # Output file

            # Add server, service & port to bruteforce
            cmd.extend(["-s", port["port"]])
            cmd.extend([self._target, port["service"]])

            # Perform scan
            self.run_cmd(cmd)

    def parse(self):
        pass

    def check(target):
        ports = []
        # Read multiple json objs from hydra file
        with open(
            f"{os.getcwd()}/targets/{target}/results/hydra_result.json",
            "r"
        ) as f:
            # Go through each object
            for hydra_resobj in f:
                hydra_res = json.loads(hydra_resobj)

                if hydra_res["success"]:
                    # Check result
                    for res in hydra_res["results"]:
                        # Append to ports payload
                        ports.append({
                            "user": res["login"],
                            "password": res["password"],
                            "port": res["port"],
                            "service": res["service"]
                        })
        
        return {"ports": ports}