#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import configparser
from core.constants import EX, IG, VA
import importlib
import json
import socket
from modules.nmap import NmapModule
from threading import Thread
from multiprocessing import Process
from core.helper import create_new_target, generate_random, get_module, get_module_config, get_module_types, read_config
from database.db import connect
import argparse
import os

'''
Initializes the program
'''
def load():
    # Get args
    args = get_args() # UNUSED for now

    # Load config file
    read_config()

    # Connect to database
    #connect()

    # Read from command line
    while True:
        target = read_cli()
        
        if target == False:
            continue
        else:
            print(generate_random(10))
            print(f"--- Scanner for {target} started ---")
            ## Create thread
            thread = Process(target = scanner_start, args = (target,))
            thread.start()

'''
Function to get all modules for specific target with a certain type
Adds thread to threads array
'''
def thread_module_types(threads, config, type):
    # Append modules
    for module in get_module_types(type):
        module = module.lower()
        if config.has_section(module.capitalize()):
            threads.append(Thread(target = run_module, args = (get_module(module)(get_module_config(config, module)),)))

    # Start & wait for finish
    for thread in threads:
        thread.start()
    
    for thread in threads:
        thread.join()

'''
Function to run all regression tests saved
'''
def regression_tests(threads, target):
    _path_to_regtests = os.path.join(f'{os.getcwd()}/targets/{target}/regtests')

    # Get modules
    modules = os.listdir(_path_to_regtests)

    # Get .json files
    modules = [m for m in modules if m.split('.')[-1] == "json"]

    # Create class for modules
    for module in modules:
        module_name = module.split(".")[0]

        # Read regression test file
        f = open(f"{_path_to_regtests}/{module}")
        data = json.load(f)
        f.close()

        # Create thread for each regression test
        for regtest, info in data:
            threads.append(Thread(target = run_regtest, args = (module_name, regtest, info)))

    # Start & wait for finish
    for thread in threads:
        thread.start()

'''
Main method for running the scanner for the target
'''
def scanner_start(target):
    ## Read config file for target
    config = configparser.ConfigParser()
    config.read(os.path.join(f'{os.getcwd()}/targets', target) + "/config.ini")

    # Add target to config
    config.set("General", "target", target)

    # Get topology
    f = open(f'{os.getcwd()}/targets/{target}/topology.json')
    topology = json.load(f)
    f.close()

    # Setup Jumpssh
    ssh_conns = []
    # TODO: Fix this

    # Array to hold threads
    threads = []
    regtests_threads = []

    ### Start the regression tests brah
    ### Strong independant stage
    regression_tests(regtests_threads, target)

    ### Start IG
    thread_module_types(threads, config, IG)

    ### Start VA
    thread_module_types(threads, config, VA)

    ### Start Exploit
    thread_module_types(threads, config, EX)

    ## Wait for regression tests to finish
    ## Is running parallel with all the stages
    for thread in regtests_threads:
        thread.join()
    
'''
Runs a specific module
'''
def run_module(module):
    ## Run module
    module.run()

    ## Handle result
    module.get_result()

    ## Parse module result
    module.parse()

    ## Check regression
    module.check_regtests()

'''
Creates and runs a regtest
'''
def run_regtest(module_name, regtest, data):
    # Create regtest module
    cls = getattr(importlib.import_module(f'modules.{module_name.lower()}'), f"{regtest}Regression")

    # Create regression test object
    reg_obj = cls()
    reg_obj.set_data(data)

    # Run regtest
    reg_obj.run()

    # Get result
    reg_obj.get_result()

    # Parse result
    reg_obj.parse()

'''
Get CLI arguments
'''
def get_args():
    parser = argparse.ArgumentParser("python3 main.py")

    return parser.parse_args()
    
'''
Specify which target to run against
'''
def read_cli():
    target = input("Choose target: ")

    # Don't allow empty inputs
    if not target:
        return False 

    try:
        # Check if valid ip adress
        socket.inet_aton(target)

        # Check if target exists
        if(os.path.isdir(os.path.join(f'{os.getcwd()}/targets', target))):
            print(f"Starting scan for target: {target}")
            return target
        else:
            # Create new target
            print(f"{target} does not exists, creating new folder")

            create_new_target(target)

            print(f"Folder for {target} created, please configure it before retrying")
            return False
    except Exception:
        return False


'''
Checks that all dependencies are present
'''
def check_dependencies():
    
    pass
