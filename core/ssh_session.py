#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from jumpssh import SSHSession 
from jumpssh.exception import RunCmdError

'''
Class for managing SSH connections
'''
class Session():
    def __init__(self, topology, target):
        self._connected = False

        # Variables
        self._connections = []

        # Find way to target
        self._tool_is_host = True

        target_topology = [(k, v) for k, v in topology.items() if v.host == target][0]

        if target_topology[1].parent != "tool":
            self._tool_is_host = False
        
        # Filter and get only the important path in topology
        self._topology = []
        current = target_topology[0]
        for _ in range(len(topology.keys())):
            self._topology.insert(0, topology[current])

            current = topology[current].parent

            # Break if reached null target
            if current == None:
                break

    '''
    Runs cmd on preceding host
    '''
    def run_cmd(self, cmd):
        if self._connected:
            if len(self._connections) > 1:
                return self._connections[-2].run_cmd(cmd)
            else:
                raise Exception("More than 1 connection must be present")
        
        raise Exception("Session is not connected")

    '''
    Runs cmd on target
    '''
    def run_cmd_target(self, cmd):
        if self._connected:
            if len(self._connections) > 0:
                return self._connections[-1].run_cmd(cmd)
            else:
                raise Exception("More than 0 connections must be present")
        
        raise Exception("Session is not connected")

    '''
    Runs cmd on preceding host
    '''
    def get_cmd(self, cmd):
        if self._connected:
            if len(self._connections) > 1:
                return self._connections[-2].get_cmd_output(cmd)
            else:
                raise Exception("More than 1 connections must be present")
        
        raise Exception("Session is not connected")

    '''
    Runs cmd on target
    '''
    def get_cmd_target(self, cmd):
        if self._connected:
            if len(self._connections) > 0:
                return self._connections[-1].get_cmd_output(cmd)
            else:
                raise Exception("More than 0 connections must be present")
        
        raise Exception("Session is not connected")

    '''
    '''
    def connect_ssh(self):
        self._connected = True

        # Create SSH connection to tool host
        self._connections.append(
            SSHSession(
                self._topology[0]["host"],
                self._topology[0]["user"],
                password=self._topology[0]["password"],
                look_for_keys=False,
                auth_timeout=30,
                timeout=12000,
            )
        )

        # Create connection to all targets within the fixed topology
        for i in range(0, len(self._topology)):
            self._connections.append(
                self._connections[i - 1].get_remote_session(
                    self._topology["host"],
                    self._topology["user"],
                    password=self._topology["password"],
                    look_for_keys=False,
                    auth_timeout=30,
                    timeout=12000,
                )
            )

    '''
    Get file from remote preceding host
    '''
    def get_file(self, **kwargs):
        if self._connected:
            if len(self._connections) > 1:
                return self._connections[-2].get(**kwargs)
            else:
                raise Exception("More than 1 connections must be present")
        
        raise Exception("Session is not connected")


    '''
    Get file from remote target host
    '''
    def get_file_target(self):
        if self._connected:
            if len(self._connections) > 0:
                return self._connections[-1].get(**kwargs)
            else:
                raise Exception("More than 0 connections must be present")
        
        raise Exception("Session is not connected")

    '''
    Disconnect from all SSH hosts
    '''
    def disconnect(self):
        for con in self._connections.values():
            con.close()