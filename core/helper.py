#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import configparser
import importlib
import os

'''
Function for getting config file
'''
_config = None

def read_config():
    config = configparser.ConfigParser()
    config.read("../config.ini")
    return config

def config():
    global _config

    if not _config:
        read_config()
    
    return _config

'''
Function to get class from module file
'''
def get_module(module):
    _module_class = f'{module.capitalize()}Module'

    try:
        return getattr(importlib.import_module(f'modules.{module.lower()}'), _module_class)
    except Exception:
        return None

'''
Function to get config for module
'''
def get_module_config(config, module):
    if config.has_section(module.capitalize()):
        return config[module.capitalize()]
    else:
        return []

'''
Function for getting all modules with a certain type
Supports three types: IG, VA, EX
'''
def get_module_types(type):
    modules = os.listdir(os.path.join(f'{os.getcwd()}/modules'))
    
    # Get .py modules
    modules = [m for m in modules if m.split('.')[-1] == "py"]
    modules = [m.split('.')[0] for m in modules]

    modules_type = []

    for module in modules:
        if get_module(module)._type == type:
            modules_type.append(module)
    
    return modules_type

'''
Function for creating new target in /targets directory
'''
def create_new_target(target):
    target_loc = f'{os.getcwd()}/targets/{target}'

    # Create directories
    os.mkdir(os.path.join(f'{os.getcwd()}/targets', target))
    os.mkdir(os.path.join(target_loc, "regtests"))
    os.mkdir(os.path.join(target_loc, "results"))

    # Create files
    with open(f'{target_loc}/config.ini', 'w'): pass

    with open(f'{target_loc}/topology.json', 'w'): pass