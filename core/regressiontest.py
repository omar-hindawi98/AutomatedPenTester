#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from abc import ABC, abstractmethod
from core.constants import EXTERNAL, INTERNAL
import os
from core.helper import remove_suffix, tool_config
import logging

logger = logging.getLogger(__name__)

"""
Abstract class for RegressionTests
"""


class RegressionTest(ABC):
    def __init__(self, session, data, target_type):
        # SSH Session
        self._session = session

        # Regression test data from json file
        self._data = data

        # Target type(Int or ext)
        self._target_type = target_type

        # For file saving
        self._res_name = (
            remove_suffix(self.__class__.__name__, "Regression").lower() + "_result"
        )
        self._tmp = tool_config()["General"]["rlocation"]

    def _tmpfile_loc(self, port = None):
        if port:
            self._portwrite = True
            return f"{self._tmp}{self._res_name}_{port}{self._extension}"
        return f"{self._tmp}{self._res_name}{self._extension}"

    @abstractmethod
    def check():
        pass

    @abstractmethod
    def run():
        pass

    @abstractmethod
    def parse():
        pass

    """
    Runs CMD on Session
    """

    def run_cmd(self, cmd, use_sudo=True):
        if self._target_type == INTERNAL:
            return self._session.run_cmd_target(cmd, use_sudo)
        elif self._target_type == EXTERNAL:
            return self._session.run_cmd(cmd, use_sudo)

    """
    Removing old result
    """

    def remove_old_result(self):
        local_path = f"{os.getcwd()}/targets/{self._target}/results/regtests/"
        if os.path.exists(f"{local_path}{self._res_name}{self._extension}"):
            os.remove(f"{local_path}{self._res_name}{self._extension}")

        if os.path.exists(f"{local_path}{self._res_name}.json"):
            os.remove(f"{local_path}{self._res_name}.json")

    """
    Gets result from performed command
    """

    def get_result(self):
        local_loc = f"{os.getcwd()}/targets/{self._target}/results/regtests/{self._res_name}{self._extension}"

        # Check if written to specific port file, append to final file
        if self._portwrite:
            for port in self._payload["ports"]:
                local_port_loc = f"{os.getcwd()}/targets/{self._target}/results/regtests/{self._res_name}_{port[0]}{self._extension}"
                try:
                    if self._target_type == INTERNAL:
                        self._session.get_file_target(
                            self._tmpfile_loc(port[0]),
                            local_port_loc,
                        )
                    elif self._target_type == EXTERNAL:
                        self._session.get_file(
                            self._tmpfile_loc(port[0]),
                            local_port_loc,
                        )
                    
                    # Append to result file
                    data = ""

                    with open (local_port_loc, 'a+') as f:
                        data = f.read()

                    with open (local_loc, 'a+') as f:
                        f.write(data)
                    
                    # Remove port specific file
                    os.remove(local_port_loc)
                except Exception:
                    pass
        else:
            try:
                if self._target_type == INTERNAL:
                    self._session.get_file_target(
                        self._tmpfile_loc(),
                        local_loc,
                    )
                elif self._target_type == EXTERNAL:
                    self._session.get_file(
                        self._tmpfile_loc(),
                        local_loc,
                    )
            except Exception:
                pass
