#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from abc import ABC, abstractmethod
from core.helper import remove_suffix
import importlib
import json
import os
import inspect

'''
Abstract class for Modules
'''
class Module(ABC):
    def __init__(self, config, target):
        self._config = config
        self._target = target
        self._type = []
        self._result = None

    @abstractmethod
    def run():
        pass

    @abstractmethod
    def parse():
        pass

    @abstractmethod
    def get_result():
        pass

    def save_result(self, result):
        self._result = result

    '''
    Checks all regression cases in module file
    '''
    def check_regtests(self):
        # Get class name
        module_name = remove_suffix(self.__class__.__name__, "Module").lower()

        # SKIP Threading here, locking is -_-
        # Check each regression test in module file
        for name, cls in inspect.getmembers(importlib.import_module(f'modules.{module_name.lower()}'), inspect.isclass):
            if name.endswith("Regression"):
                regtest = cls(self._result)
                res = regtest.check()
                reg_name = remove_suffix(name, "Regression")

                file_path = os.path.join(f'{os.getcwd()}/targets', self._target) + f"/regtests/{module_name}.json"

                # Create or append to regression test file if found
                if res:
                    res_json = {}
                    res_json[reg_name] = res 

                    if os.path.exists(file_path):
                        # Append to json
                        with open(file_path, 'r+') as f:
                            # TODO: fix this
                            data = json.load(f)

                            data[reg_name] = res

                            json.dump(data, f, indent=4, sort_keys=True)
                    else:
                        # Create new file with json
                        with open(file_path, 'w') as f:
                            json.dump(res_json, f, indent=4, sort_keys=True)