#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from abc import ABC, abstractmethod
import importlib
import os
import inspect

'''
Abstract class for Modules
'''
class Module(ABC):
    def __init__(self, config):
        self.config = config
        self._type = ""

    @abstractmethod
    def run():
        pass

    @abstractmethod
    def parse():
        pass

    @abstractmethod
    def get_result():
        pass

    def save_result(self, result):
        self._result = result

    '''
    Checks all regression cases in module file
    '''
    def check_regtests(self):
        # Get class name
        module_name = self.__class__.__name__.replace("Module", "").lower()

        # SKIP Threading here, locking is -_-
        # Check each regression test in module file
        for name, cls in inspect.getmembers(importlib.import_module(f'modules.{module_name.lower()}'), inspect.isclass):
            if name.endswith("Regression"):
                regtest = cls(self._result)
                regtest.check()