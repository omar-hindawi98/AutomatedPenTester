#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from datetime import datetime
from core.constants import RunStatus
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship
from sqlalchemy import Column, Integer, DateTime, Enum, VARCHAR, ForeignKey, String, PickleType, Boolean

Base = declarative_base()


class Runs(Base):
    __tablename__ = "runs"

    id = Column(
        Integer, primary_key=True, unique=True, autoincrement=True
    )  # Id in database
    latest=Column(Boolean)
    date = Column(DateTime(timezone=True), default=datetime.utcnow)  # Date of run
    finished = Column(DateTime(timezone=True), default=None)
    target = Column(VARCHAR(length=255))

    # Regression run status
    regression = Column(Enum(RunStatus), default=RunStatus.PENDING)
    regression_tests=relationship("RegressionTests", backref="runs")

    # Internal run status
    internal_ig = Column(Enum(RunStatus), default=RunStatus.PENDING)
    internal_va = Column(Enum(RunStatus), default=RunStatus.PENDING)
    internal_ex = Column(Enum(RunStatus), default=RunStatus.PENDING)

    # External run status
    external_ig = Column(Enum(RunStatus), default=RunStatus.PENDING)
    external_va = Column(Enum(RunStatus), default=RunStatus.PENDING)
    external_ex = Column(Enum(RunStatus), default=RunStatus.PENDING)


class RegressionTests(Base):
    __tablename__ = "regression_tests"
    # Id in database
    id = Column(Integer, primary_key=True, unique=True, autoincrement=True)

    # Run id
    run_id = Column(Integer, ForeignKey("runs.id"))

    # Testcase information
    module = Column(String)
    name = Column(String)
    description = Column(String)
    payload = Column(PickleType)
    config = Column(PickleType)
