#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from sqlalchemy.exc import OperationalError
import time

from core.helper import tool_config
from database.models import Base

"""
Connect to db
"""


def db_con():
    config = tool_config()

    # Connect to DB
    try:
        for _ in range(0, 100):
            try:
                db_engine = create_engine(
                    "{0}://{1}:{2}@{3}:{4}/{5}".format(
                        config["Database"]["dbsm"],
                        config["Database"]["user"],
                        config["Database"]["pass"],
                        config["Database"]["host"],
                        config["Database"]["port"],
                        config["Database"]["db"],
                    )
                )
                Session = sessionmaker(bind=db_engine)
                session = Session()

                return session
            except Exception:
                time.sleep(0.1)
    except Exception:
        print("Database con fail")

    return False


"""
Check if DB exists, create new if not present.
Also migrate all table changes for modules
"""


def check_db():
    config = tool_config()

    try:
        # Check if DB exists
        db_engine = create_engine(
            "{0}://{1}:{2}@{3}:{4}/{5}".format(
                config["Database"]["dbsm"],
                config["Database"]["user"],
                config["Database"]["pass"],
                config["Database"]["host"],
                config["Database"]["port"],
                config["Database"]["db"],
            )
        )

        # Create all tables
        Base.metadata.create_all(db_engine)
    except OperationalError:
        print("DB does not exist")
        # Create new DB, does not exist
        _engine = create_engine(
            "{0}://{1}:{2}@{3}:{4}/{5}".format(
                config["Database"]["dbsm"],
                config["Database"]["user"],
                config["Database"]["pass"],
                config["Database"]["host"],
                config["Database"]["port"],
                config["Database"]["fallback_db"],
            )
        )

        # Create DB
        conn = _engine.connect()
        conn.execute("commit")
        conn.execute(f'CREATE DATABASE {config["Database"]["db"]}')
        conn.close()

        db_engine = create_engine(
            "{0}://{1}:{2}@{3}:{4}/{5}".format(
                config["Database"]["dbsm"],
                config["Database"]["user"],
                config["Database"]["pass"],
                config["Database"]["host"],
                config["Database"]["port"],
                config["Database"]["db"],
            )
        )

        # Create all tables
        Base.metadata.create_all(db_engine)
    except Exception:
        print("Database con fail")
        return False
